// Don't touch this manually, this code is generated by the SymbolsGenerator helper tool

// 5.0 Symbols
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public extension SFSymbol {
    /// 􁥚
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let _2h = SFSymbol(rawValue: "2h")

    /// 􁥞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let _2hCircle = SFSymbol(rawValue: "2h.circle")

    /// 􁥟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let _2hCircleFill = SFSymbol(rawValue: "2h.circle.fill")

    /// 􁥝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let _4a = SFSymbol(rawValue: "4a")

    /// 􁥤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let _4aCircle = SFSymbol(rawValue: "4a.circle")

    /// 􁥥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let _4aCircleFill = SFSymbol(rawValue: "4a.circle.fill")

    /// 􁥛
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let _4h = SFSymbol(rawValue: "4h")

    /// 􁥠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let _4hCircle = SFSymbol(rawValue: "4h.circle")

    /// 􁥡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let _4hCircleFill = SFSymbol(rawValue: "4h.circle.fill")

    /// 􁥜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let _4l = SFSymbol(rawValue: "4l")

    /// 􁥢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let _4lCircle = SFSymbol(rawValue: "4l.circle")

    /// 􁥣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let _4lCircleFill = SFSymbol(rawValue: "4l.circle.fill")

    /// 􀕾
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Accessibility features.
    static let accessibility = SFSymbol(rawValue: "accessibility")

    /// 􀮓
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Accessibility features.
    static let accessibilityBadgeArrowUpRight = SFSymbol(rawValue: "accessibility.badge.arrow.up.right")

    /// 􀕿
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Accessibility features.
    static let accessibilityFill = SFSymbol(rawValue: "accessibility.fill")

    /// 􁔂
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods Pro.
    static let airpodsproChargingcaseWirelessRadiowavesLeftAndRight = SFSymbol(rawValue: "airpodspro.chargingcase.wireless.radiowaves.left.and.right")

    /// 􁔃
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods Pro.
    static let airpodsproChargingcaseWirelessRadiowavesLeftAndRightFill = SFSymbol(rawValue: "airpodspro.chargingcase.wireless.radiowaves.left.and.right.fill")

    /// 􀩼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let appleTerminal = SFSymbol(rawValue: "apple.terminal")

    /// 􀪏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let appleTerminalFill = SFSymbol(rawValue: "apple.terminal.fill")

    /// 􁹛
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let appleTerminalOnRectangle = SFSymbol(rawValue: "apple.terminal.on.rectangle")

    /// 􁹜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let appleTerminalOnRectangleFill = SFSymbol(rawValue: "apple.terminal.on.rectangle.fill")

    /// 􁰒
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilAdapterUsbC = SFSymbol(rawValue: "applepencil.adapter.usb.c")

    /// 􁰓
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilAdapterUsbCFill = SFSymbol(rawValue: "applepencil.adapter.usb.c.fill")

    /// 􁤑
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilAndScribble = SFSymbol(rawValue: "applepencil.and.scribble")

    /// 􁰤
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilGen1 = SFSymbol(rawValue: "applepencil.gen1")

    /// 􁰥
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilGen2 = SFSymbol(rawValue: "applepencil.gen2")

    /// 􁤓
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencilTip = SFSymbol(rawValue: "applepencil.tip")

    /// 􂄅
    /// 2 Localizations, 2 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let applewatchAndArrowForward = SymbolWith1Localization<Rtl>(rawValue: "applewatch.and.arrow.forward")

    /// 􁻻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let appwindowSwipeRectangle = SFSymbol(rawValue: "appwindow.swipe.rectangle")

    /// 􂁢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStick = SFSymbol(rawValue: "arcade.stick")

    /// 􂁨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowDown = SFSymbol(rawValue: "arcade.stick.and.arrow.down")

    /// 􂁤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowLeft = SFSymbol(rawValue: "arcade.stick.and.arrow.left")

    /// 􂁣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowLeftAndArrowRight = SFSymbol(rawValue: "arcade.stick.and.arrow.left.and.arrow.right")

    /// 􂁥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowRight = SFSymbol(rawValue: "arcade.stick.and.arrow.right")

    /// 􂁧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowUp = SFSymbol(rawValue: "arcade.stick.and.arrow.up")

    /// 􂁦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickAndArrowUpAndArrowDown = SFSymbol(rawValue: "arcade.stick.and.arrow.up.and.arrow.down")

    /// 􂁠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arcadeStickConsole = SFSymbol(rawValue: "arcade.stick.console")

    /// 􂁡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arcadeStickConsoleFill = SFSymbol(rawValue: "arcade.stick.console.fill")

    /// 􂅕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowBackwardToLineSquare = SFSymbol(rawValue: "arrow.backward.to.line.square")

    /// 􂅖
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowBackwardToLineSquareFill = SFSymbol(rawValue: "arrow.backward.to.line.square.fill")

    /// 􁹠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowCirclepath = SFSymbol(rawValue: "arrow.circlepath")

    /// 􂅛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowClockwiseSquare = SFSymbol(rawValue: "arrow.clockwise.square")

    /// 􂅜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowClockwiseSquareFill = SFSymbol(rawValue: "arrow.clockwise.square.fill")

    /// 􂅟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowCounterclockwiseSquare = SFSymbol(rawValue: "arrow.counterclockwise.square")

    /// 􂅠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowCounterclockwiseSquareFill = SFSymbol(rawValue: "arrow.counterclockwise.square.fill")

    /// 􂄘
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let arrowDownApplewatch = SFSymbol(rawValue: "arrow.down.applewatch")

    /// 􂄢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowDownBackwardAndArrowUpForward = SFSymbol(rawValue: "arrow.down.backward.and.arrow.up.forward")

    /// 􂄣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownBackwardAndArrowUpForwardCircle = SFSymbol(rawValue: "arrow.down.backward.and.arrow.up.forward.circle")

    /// 􂄤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownBackwardAndArrowUpForwardCircleFill = SFSymbol(rawValue: "arrow.down.backward.and.arrow.up.forward.circle.fill")

    /// 􂅅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownBackwardAndArrowUpForwardSquare = SFSymbol(rawValue: "arrow.down.backward.and.arrow.up.forward.square")

    /// 􂅆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownBackwardAndArrowUpForwardSquareFill = SFSymbol(rawValue: "arrow.down.backward.and.arrow.up.forward.square.fill")

    /// 􁻿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownBackwardToptrailingRectangle = SFSymbol(rawValue: "arrow.down.backward.toptrailing.rectangle")

    /// 􁼀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownBackwardToptrailingRectangleFill = SFSymbol(rawValue: "arrow.down.backward.toptrailing.rectangle.fill")

    /// 􁹟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownCircleDotted = SFSymbol(rawValue: "arrow.down.circle.dotted")

    /// 􂅉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownForwardAndArrowUpBackwardSquare = SFSymbol(rawValue: "arrow.down.forward.and.arrow.up.backward.square")

    /// 􂅊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownForwardAndArrowUpBackwardSquareFill = SFSymbol(rawValue: "arrow.down.forward.and.arrow.up.backward.square.fill")

    /// 􁼋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownForwardTopleadingRectangle = SFSymbol(rawValue: "arrow.down.forward.topleading.rectangle")

    /// 􁼌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownForwardTopleadingRectangleFill = SFSymbol(rawValue: "arrow.down.forward.topleading.rectangle.fill")

    /// 􂄝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowDownLeftAndArrowUpRight = SFSymbol(rawValue: "arrow.down.left.and.arrow.up.right")

    /// 􂄞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftAndArrowUpRightCircle = SFSymbol(rawValue: "arrow.down.left.and.arrow.up.right.circle")

    /// 􂄟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownLeftAndArrowUpRightCircleFill = SFSymbol(rawValue: "arrow.down.left.and.arrow.up.right.circle.fill")

    /// 􂅃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftAndArrowUpRightSquare = SFSymbol(rawValue: "arrow.down.left.and.arrow.up.right.square")

    /// 􂅄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownLeftAndArrowUpRightSquareFill = SFSymbol(rawValue: "arrow.down.left.and.arrow.up.right.square.fill")

    /// 􁽧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftArrowUpRight = SFSymbol(rawValue: "arrow.down.left.arrow.up.right")

    /// 􁽨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftArrowUpRightCircle = SFSymbol(rawValue: "arrow.down.left.arrow.up.right.circle")

    /// 􁽩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownLeftArrowUpRightCircleFill = SFSymbol(rawValue: "arrow.down.left.arrow.up.right.circle.fill")

    /// 􁽪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftArrowUpRightSquare = SFSymbol(rawValue: "arrow.down.left.arrow.up.right.square")

    /// 􁽫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownLeftArrowUpRightSquareFill = SFSymbol(rawValue: "arrow.down.left.arrow.up.right.square.fill")

    /// 􁻽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownLeftToprightRectangle = SFSymbol(rawValue: "arrow.down.left.topright.rectangle")

    /// 􁻾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownLeftToprightRectangleFill = SFSymbol(rawValue: "arrow.down.left.topright.rectangle.fill")

    /// 􂅇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownRightAndArrowUpLeftSquare = SFSymbol(rawValue: "arrow.down.right.and.arrow.up.left.square")

    /// 􂅈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownRightAndArrowUpLeftSquareFill = SFSymbol(rawValue: "arrow.down.right.and.arrow.up.left.square.fill")

    /// 􁼉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownRightTopleftRectangle = SFSymbol(rawValue: "arrow.down.right.topleft.rectangle")

    /// 􁼊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownRightTopleftRectangleFill = SFSymbol(rawValue: "arrow.down.right.topleft.rectangle.fill")

    /// 􂅑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowDownToLineSquare = SFSymbol(rawValue: "arrow.down.to.line.square")

    /// 􂅒
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowDownToLineSquareFill = SFSymbol(rawValue: "arrow.down.to.line.square.fill")

    /// 􂅙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowForwardToLineSquare = SFSymbol(rawValue: "arrow.forward.to.line.square")

    /// 􂅚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowForwardToLineSquareFill = SFSymbol(rawValue: "arrow.forward.to.line.square.fill")

    /// 􂅓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowLeftToLineSquare = SFSymbol(rawValue: "arrow.left.to.line.square")

    /// 􂅔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowLeftToLineSquareFill = SFSymbol(rawValue: "arrow.left.to.line.square.fill")

    /// 􂅗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowRightToLineSquare = SFSymbol(rawValue: "arrow.right.to.line.square")

    /// 􂅘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowRightToLineSquareFill = SFSymbol(rawValue: "arrow.right.to.line.square.fill")

    /// 􂆍
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iCloud service.
    static let arrowTriangle2CirclepathIcloud = SFSymbol(rawValue: "arrow.triangle.2.circlepath.icloud")

    /// 􂆎
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iCloud service.
    static let arrowTriangle2CirclepathIcloudFill = SFSymbol(rawValue: "arrow.triangle.2.circlepath.icloud.fill")

    /// 􂅁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpBackwardAndArrowDownForwardSquare = SFSymbol(rawValue: "arrow.up.backward.and.arrow.down.forward.square")

    /// 􂅂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpBackwardAndArrowDownForwardSquareFill = SFSymbol(rawValue: "arrow.up.backward.and.arrow.down.forward.square.fill")

    /// 􁼃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpBackwardBottomtrailingRectangle = SFSymbol(rawValue: "arrow.up.backward.bottomtrailing.rectangle")

    /// 􁼄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpBackwardBottomtrailingRectangleFill = SFSymbol(rawValue: "arrow.up.backward.bottomtrailing.rectangle.fill")

    /// 􂄬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowUpForwardAndArrowDownBackward = SFSymbol(rawValue: "arrow.up.forward.and.arrow.down.backward")

    /// 􂄭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpForwardAndArrowDownBackwardCircle = SFSymbol(rawValue: "arrow.up.forward.and.arrow.down.backward.circle")

    /// 􂄮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpForwardAndArrowDownBackwardCircleFill = SFSymbol(rawValue: "arrow.up.forward.and.arrow.down.backward.circle.fill")

    /// 􂅍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpForwardAndArrowDownBackwardSquare = SFSymbol(rawValue: "arrow.up.forward.and.arrow.down.backward.square")

    /// 􂅎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpForwardAndArrowDownBackwardSquareFill = SFSymbol(rawValue: "arrow.up.forward.and.arrow.down.backward.square.fill")

    /// 􁼇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpForwardBottomleadingRectangle = SFSymbol(rawValue: "arrow.up.forward.bottomleading.rectangle")

    /// 􁼈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpForwardBottomleadingRectangleFill = SFSymbol(rawValue: "arrow.up.forward.bottomleading.rectangle.fill")

    /// 􂄿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpLeftAndArrowDownRightSquare = SFSymbol(rawValue: "arrow.up.left.and.arrow.down.right.square")

    /// 􂅀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpLeftAndArrowDownRightSquareFill = SFSymbol(rawValue: "arrow.up.left.and.arrow.down.right.square.fill")

    /// 􁾒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpLeftArrowDownRight = SFSymbol(rawValue: "arrow.up.left.arrow.down.right")

    /// 􁾓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpLeftArrowDownRightCircle = SFSymbol(rawValue: "arrow.up.left.arrow.down.right.circle")

    /// 􁾔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpLeftArrowDownRightCircleFill = SFSymbol(rawValue: "arrow.up.left.arrow.down.right.circle.fill")

    /// 􁾕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpLeftArrowDownRightSquare = SFSymbol(rawValue: "arrow.up.left.arrow.down.right.square")

    /// 􁾖
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpLeftArrowDownRightSquareFill = SFSymbol(rawValue: "arrow.up.left.arrow.down.right.square.fill")

    /// 􁼁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpLeftBottomrightRectangle = SFSymbol(rawValue: "arrow.up.left.bottomright.rectangle")

    /// 􁼂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpLeftBottomrightRectangleFill = SFSymbol(rawValue: "arrow.up.left.bottomright.rectangle.fill")

    /// 􂄧
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowUpRightAndArrowDownLeft = SFSymbol(rawValue: "arrow.up.right.and.arrow.down.left")

    /// 􂄨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpRightAndArrowDownLeftCircle = SFSymbol(rawValue: "arrow.up.right.and.arrow.down.left.circle")

    /// 􂄩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpRightAndArrowDownLeftCircleFill = SFSymbol(rawValue: "arrow.up.right.and.arrow.down.left.circle.fill")

    /// 􂅋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpRightAndArrowDownLeftSquare = SFSymbol(rawValue: "arrow.up.right.and.arrow.down.left.square")

    /// 􂅌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpRightAndArrowDownLeftSquareFill = SFSymbol(rawValue: "arrow.up.right.and.arrow.down.left.square.fill")

    /// 􁼅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpRightBottomleftRectangle = SFSymbol(rawValue: "arrow.up.right.bottomleft.rectangle")

    /// 􁼆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpRightBottomleftRectangleFill = SFSymbol(rawValue: "arrow.up.right.bottomleft.rectangle.fill")

    /// 􂅏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpToLineSquare = SFSymbol(rawValue: "arrow.up.to.line.square")

    /// 􂅐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpToLineSquareFill = SFSymbol(rawValue: "arrow.up.to.line.square.fill")

    /// 􁣈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpTrash = SFSymbol(rawValue: "arrow.up.trash")

    /// 􁣉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpTrashFill = SFSymbol(rawValue: "arrow.up.trash.fill")

    /// 􁾰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeys = SFSymbol(rawValue: "arrowkeys")

    /// 􁾳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeysDownFilled = SFSymbol(rawValue: "arrowkeys.down.filled")

    /// 􁾱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeysFill = SFSymbol(rawValue: "arrowkeys.fill")

    /// 􁾴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeysLeftFilled = SFSymbol(rawValue: "arrowkeys.left.filled")

    /// 􁾵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeysRightFilled = SFSymbol(rawValue: "arrowkeys.right.filled")

    /// 􁾲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowkeysUpFilled = SFSymbol(rawValue: "arrowkeys.up.filled")

    /// 􁾢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeBackwardCircle = SFSymbol(rawValue: "arrowshape.backward.circle")

    /// 􁾣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeBackwardCircleFill = SFSymbol(rawValue: "arrowshape.backward.circle.fill")

    /// 􁾬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeDown = SFSymbol(rawValue: "arrowshape.down")

    /// 􁾮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeDownCircle = SFSymbol(rawValue: "arrowshape.down.circle")

    /// 􁾯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeDownCircleFill = SFSymbol(rawValue: "arrowshape.down.circle.fill")

    /// 􁾭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeDownFill = SFSymbol(rawValue: "arrowshape.down.fill")

    /// 􁾦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeForwardCircle = SFSymbol(rawValue: "arrowshape.forward.circle")

    /// 􁾧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeForwardCircleFill = SFSymbol(rawValue: "arrowshape.forward.circle.fill")

    /// 􁉾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeLeftArrowshapeRight = SFSymbol(rawValue: "arrowshape.left.arrowshape.right")

    /// 􁉿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeLeftArrowshapeRightFill = SFSymbol(rawValue: "arrowshape.left.arrowshape.right.fill")

    /// 􁾠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeLeftCircle = SFSymbol(rawValue: "arrowshape.left.circle")

    /// 􁾡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeLeftCircleFill = SFSymbol(rawValue: "arrowshape.left.circle.fill")

    /// 􁾤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeRightCircle = SFSymbol(rawValue: "arrowshape.right.circle")

    /// 􁾥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeRightCircleFill = SFSymbol(rawValue: "arrowshape.right.circle.fill")

    /// 􁾨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeUp = SFSymbol(rawValue: "arrowshape.up")

    /// 􁾪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowshapeUpCircle = SFSymbol(rawValue: "arrowshape.up.circle")

    /// 􁾫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeUpCircleFill = SFSymbol(rawValue: "arrowshape.up.circle.fill")

    /// 􁾩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeUpFill = SFSymbol(rawValue: "arrowshape.up.fill")

    /// 􁊝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowtriangleUpArrowtriangleDownWindowLeft = SFSymbol(rawValue: "arrowtriangle.up.arrowtriangle.down.window.left")

    /// 􁉝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowtriangleUpArrowtriangleDownWindowRight = SFSymbol(rawValue: "arrowtriangle.up.arrowtriangle.down.window.right")

    /// 􁾍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let australiandollarsign = SFSymbol(rawValue: "australiandollarsign")

    /// 􂈹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let australiandollarsignArrowCirclepath = SFSymbol(rawValue: "australiandollarsign.arrow.circlepath")

    /// 􀮠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let australiandollarsignCircle = SFSymbol(rawValue: "australiandollarsign.circle")

    /// 􀮡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let australiandollarsignCircleFill = SFSymbol(rawValue: "australiandollarsign.circle.fill")

    /// 􀮢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let australiandollarsignSquare = SFSymbol(rawValue: "australiandollarsign.square")

    /// 􀮣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let australiandollarsignSquareFill = SFSymbol(rawValue: "australiandollarsign.square.fill")

    /// 􂈣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let australsignArrowCirclepath = SFSymbol(rawValue: "australsign.arrow.circlepath")

    /// 􁟁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let automaticBrakesignal = SFSymbol(rawValue: "automatic.brakesignal")

    /// 􁢧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let automaticHeadlightHighBeam = SFSymbol(rawValue: "automatic.headlight.high.beam")

    /// 􁢨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let automaticHeadlightHighBeamFill = SFSymbol(rawValue: "automatic.headlight.high.beam.fill")

    /// 􁢩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let automaticHeadlightLowBeam = SFSymbol(rawValue: "automatic.headlight.low.beam")

    /// 􁢪
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let automaticHeadlightLowBeamFill = SFSymbol(rawValue: "automatic.headlight.low.beam.fill")

    /// 􁠤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let axle2DriveshaftDisengaged = SFSymbol(rawValue: "axle.2.driveshaft.disengaged")

    /// 􁠢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let axle2FrontDisengaged = SFSymbol(rawValue: "axle.2.front.disengaged")

    /// 􁠣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let axle2RearDisengaged = SFSymbol(rawValue: "axle.2.rear.disengaged")

    /// 􁠨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let axle2RearLock = SFSymbol(rawValue: "axle.2.rear.lock")

    /// 􂈯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bahtsignArrowCirclepath = SFSymbol(rawValue: "bahtsign.arrow.circlepath")

    /// 􀛪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let battery0percent = SFSymbol(rawValue: "battery.0percent")

    /// 􀛨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100percent = SFSymbol(rawValue: "battery.100percent")

    /// 􀢋
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100percentBolt = SymbolWith1Localization<Rtl>(rawValue: "battery.100percent.bolt")

    /// 􁁔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100percentCircle = SFSymbol(rawValue: "battery.100percent.circle")

    /// 􁁕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100percentCircleFill = SFSymbol(rawValue: "battery.100percent.circle.fill")

    /// 􀛩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery25percent = SFSymbol(rawValue: "battery.25percent")

    /// 􀺶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery50percent = SFSymbol(rawValue: "battery.50percent")

    /// 􀺸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery75percent = SFSymbol(rawValue: "battery.75percent")

    /// 􁅞
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Fit Pro.
    static let beatsFitpro = SFSymbol(rawValue: "beats.fitpro")

    /// 􁅡
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Fit Pro case.
    static let beatsFitproChargingcase = SFSymbol(rawValue: "beats.fitpro.chargingcase")

    /// 􁅢
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Fit Pro case.
    static let beatsFitproChargingcaseFill = SFSymbol(rawValue: "beats.fitpro.chargingcase.fill")

    /// 􁅟
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Fit Pro.
    static let beatsFitproLeft = SFSymbol(rawValue: "beats.fitpro.left")

    /// 􁅠
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Fit Pro.
    static let beatsFitproRight = SFSymbol(rawValue: "beats.fitpro.right")

    /// 􁹳
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds Plus.
    static let beatsStudiobudsplus = SFSymbol(rawValue: "beats.studiobudsplus")

    /// 􁹶
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds Plus case.
    static let beatsStudiobudsplusChargingcase = SFSymbol(rawValue: "beats.studiobudsplus.chargingcase")

    /// 􁹷
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds Plus case.
    static let beatsStudiobudsplusChargingcaseFill = SFSymbol(rawValue: "beats.studiobudsplus.chargingcase.fill")

    /// 􁹴
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds Plus.
    static let beatsStudiobudsplusLeft = SFSymbol(rawValue: "beats.studiobudsplus.left")

    /// 􁹵
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds Plus.
    static let beatsStudiobudsplusRight = SFSymbol(rawValue: "beats.studiobudsplus.right")

    /// 􂄱
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bellBadgeSlash = SymbolWith1Localization<Rtl>(rawValue: "bell.badge.slash")

    /// 􂄲
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bellBadgeSlashFill = SymbolWith1Localization<Rtl>(rawValue: "bell.badge.slash.fill")

    /// 􀻿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bellBadgeWaveform = SFSymbol(rawValue: "bell.badge.waveform")

    /// 􀼀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bellBadgeWaveformFill = SFSymbol(rawValue: "bell.badge.waveform.fill")

    /// 􁣙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let binocularsCircle = SFSymbol(rawValue: "binoculars.circle")

    /// 􁣚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let binocularsCircleFill = SFSymbol(rawValue: "binoculars.circle.fill")

    /// 􁼙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let birdCircle = SFSymbol(rawValue: "bird.circle")

    /// 􁼚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let birdCircleFill = SFSymbol(rawValue: "bird.circle.fill")

    /// 􂈱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bitcoinsignArrowCirclepath = SFSymbol(rawValue: "bitcoinsign.arrow.circlepath")

    /// 􀘳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeAutomatic = SFSymbol(rawValue: "bolt.badge.automatic")

    /// 􀘴
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeAutomaticFill = SFSymbol(rawValue: "bolt.badge.automatic.fill")

    /// 􁸏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeCheckmark = SFSymbol(rawValue: "bolt.badge.checkmark")

    /// 􁸑
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeCheckmarkFill = SFSymbol(rawValue: "bolt.badge.checkmark.fill")

    /// 􁸓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeXmark = SFSymbol(rawValue: "bolt.badge.xmark")

    /// 􁸕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeXmarkFill = SFSymbol(rawValue: "bolt.badge.xmark.fill")

    /// 􁥽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bookAndWrench = SFSymbol(rawValue: "book.and.wrench")

    /// 􁰸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bookAndWrenchFill = SFSymbol(rawValue: "book.and.wrench.fill")

    /// 􁜾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bookPages = SFSymbol(rawValue: "book.pages")

    /// 􁜿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bookPagesFill = SFSymbol(rawValue: "book.pages.fill")

    /// 􂂇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let brainFill = SFSymbol(rawValue: "brain.fill")

    /// 􂃈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let brainFilledHeadProfile = SFSymbol(rawValue: "brain.filled.head.profile")

    /// 􂂆
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let brainHeadProfileFill = SFSymbol(rawValue: "brain.head.profile.fill")

    /// 􂈲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let brazilianrealsignArrowCirclepath = SFSymbol(rawValue: "brazilianrealsign.arrow.circlepath")

    /// 􂄹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bubble = SFSymbol(rawValue: "bubble")

    /// 􂄻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bubbleCircle = SFSymbol(rawValue: "bubble.circle")

    /// 􂄼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bubbleCircleFill = SFSymbol(rawValue: "bubble.circle.fill")

    /// 􂄺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bubbleFill = SFSymbol(rawValue: "bubble.fill")

    /// 􂃧
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bubbleLeftAndTextBubbleRight = SymbolWith1Localization<Rtl>(rawValue: "bubble.left.and.text.bubble.right")

    /// 􂃨
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bubbleLeftAndTextBubbleRightFill = SymbolWith1Localization<Rtl>(rawValue: "bubble.left.and.text.bubble.right.fill")

    /// 􁸅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledbottomHorizontalLeft = SFSymbol(rawValue: "button.angledbottom.horizontal.left")

    /// 􁸆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledbottomHorizontalLeftFill = SFSymbol(rawValue: "button.angledbottom.horizontal.left.fill")

    /// 􁸃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledbottomHorizontalRight = SFSymbol(rawValue: "button.angledbottom.horizontal.right")

    /// 􁸄
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledbottomHorizontalRightFill = SFSymbol(rawValue: "button.angledbottom.horizontal.right.fill")

    /// 􁷯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledtopVerticalLeft = SFSymbol(rawValue: "button.angledtop.vertical.left")

    /// 􁷰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledtopVerticalLeftFill = SFSymbol(rawValue: "button.angledtop.vertical.left.fill")

    /// 􁷱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledtopVerticalRight = SFSymbol(rawValue: "button.angledtop.vertical.right")

    /// 􁷲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonAngledtopVerticalRightFill = SFSymbol(rawValue: "button.angledtop.vertical.right.fill")

    /// 􁸞
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonHorizontal = SFSymbol(rawValue: "button.horizontal")

    /// 􁸟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonHorizontalFill = SFSymbol(rawValue: "button.horizontal.fill")

    /// 􂁫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonHorizontalTopPress = SFSymbol(rawValue: "button.horizontal.top.press")

    /// 􂁬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonHorizontalTopPressFill = SFSymbol(rawValue: "button.horizontal.top.press.fill")

    /// 􀩺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonRoundedbottomHorizontal = SFSymbol(rawValue: "button.roundedbottom.horizontal")

    /// 􀩻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonRoundedbottomHorizontalFill = SFSymbol(rawValue: "button.roundedbottom.horizontal.fill")

    /// 􀩸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonRoundedtopHorizontal = SFSymbol(rawValue: "button.roundedtop.horizontal")

    /// 􀩹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let buttonRoundedtopHorizontalFill = SFSymbol(rawValue: "button.roundedtop.horizontal.fill")

    /// 􂂉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonVerticalLeftPress = SFSymbol(rawValue: "button.vertical.left.press")

    /// 􂂊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonVerticalLeftPressFill = SFSymbol(rawValue: "button.vertical.left.press.fill")

    /// 􂁩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonVerticalRightPress = SFSymbol(rawValue: "button.vertical.right.press")

    /// 􂁪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonVerticalRightPressFill = SFSymbol(rawValue: "button.vertical.right.press.fill")

    /// 􁊒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cableCoaxial = SFSymbol(rawValue: "cable.coaxial")

    /// 􂇥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cableConnectorSlash = SFSymbol(rawValue: "cable.connector.slash")

    /// 􁻧
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let calendarBadgeCheckmark = SymbolWith1Localization<Rtl>(rawValue: "calendar.badge.checkmark")

    /// 􁤥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cameraBadgeClock = SFSymbol(rawValue: "camera.badge.clock")

    /// 􁤦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cameraBadgeClockFill = SFSymbol(rawValue: "camera.badge.clock.fill")

    /// 􀢘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cameraBadgeEllipsisFill = SFSymbol(rawValue: "camera.badge.ellipsis.fill")

    /// 􂄉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carFrontWavesDown = SFSymbol(rawValue: "car.front.waves.down")

    /// 􂄊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carFrontWavesDownFill = SFSymbol(rawValue: "car.front.waves.down.fill")

    /// 􁣩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carRearAndCollisionRoadLane = SFSymbol(rawValue: "car.rear.and.collision.road.lane")

    /// 􁣪
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carRearAndCollisionRoadLaneSlash = SFSymbol(rawValue: "car.rear.and.collision.road.lane.slash")

    /// 􁥎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideHillDown = SFSymbol(rawValue: "car.side.hill.down")

    /// 􁥏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideHillDownFill = SFSymbol(rawValue: "car.side.hill.down.fill")

    /// 􁤍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideHillUp = SFSymbol(rawValue: "car.side.hill.up")

    /// 􁤎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideHillUpFill = SFSymbol(rawValue: "car.side.hill.up.fill")

    /// 􁣹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideLock = SFSymbol(rawValue: "car.side.lock")

    /// 􁣺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideLockFill = SFSymbol(rawValue: "car.side.lock.fill")

    /// 􁣻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideLockOpen = SFSymbol(rawValue: "car.side.lock.open")

    /// 􁣼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideLockOpenFill = SFSymbol(rawValue: "car.side.lock.open.fill")

    /// 􁵴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideRearAndCollisionAndCarSideFront = SFSymbol(rawValue: "car.side.rear.and.collision.and.car.side.front")

    /// 􁵵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideRearAndCollisionAndCarSideFrontSlash = SFSymbol(rawValue: "car.side.rear.and.collision.and.car.side.front.slash")

    /// 􁵸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideRearAndExclamationmarkAndCarSideFront = SFSymbol(rawValue: "car.side.rear.and.exclamationmark.and.car.side.front")

    /// 􁵷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carSideRearAndWave3AndCarSideFront = SFSymbol(rawValue: "car.side.rear.and.wave.3.and.car.side.front")

    /// 􁵹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let carTopDoorSlidingLeftOpen = SFSymbol(rawValue: "car.top.door.sliding.left.open")

    /// 􁵺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let carTopDoorSlidingLeftOpenFill = SFSymbol(rawValue: "car.top.door.sliding.left.open.fill")

    /// 􁵻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let carTopDoorSlidingRightOpen = SFSymbol(rawValue: "car.top.door.sliding.right.open")

    /// 􁵼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let carTopDoorSlidingRightOpenFill = SFSymbol(rawValue: "car.top.door.sliding.right.open.fill")

    /// 􂂛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopFrontleftArrowtriangle = SFSymbol(rawValue: "car.top.frontleft.arrowtriangle")

    /// 􂂜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopFrontleftArrowtriangleFill = SFSymbol(rawValue: "car.top.frontleft.arrowtriangle.fill")

    /// 􂂝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopFrontrightArrowtriangle = SFSymbol(rawValue: "car.top.frontright.arrowtriangle")

    /// 􂂞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopFrontrightArrowtriangleFill = SFSymbol(rawValue: "car.top.frontright.arrowtriangle.fill")

    /// 􁢤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carTopRadiowavesRearRightBadgeExclamationmark = SFSymbol(rawValue: "car.top.radiowaves.rear.right.badge.exclamationmark")

    /// 􁢥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carTopRadiowavesRearRightBadgeExclamationmarkFill = SFSymbol(rawValue: "car.top.radiowaves.rear.right.badge.exclamationmark.fill")

    /// 􁢢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carTopRadiowavesRearRightBadgeXmark = SFSymbol(rawValue: "car.top.radiowaves.rear.right.badge.xmark")

    /// 􁢣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carTopRadiowavesRearRightBadgeXmarkFill = SFSymbol(rawValue: "car.top.radiowaves.rear.right.badge.xmark.fill")

    /// 􂂑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopRearleftArrowtriangle = SFSymbol(rawValue: "car.top.rearleft.arrowtriangle")

    /// 􂂒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopRearleftArrowtriangleFill = SFSymbol(rawValue: "car.top.rearleft.arrowtriangle.fill")

    /// 􂂓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopRearrightArrowtriangle = SFSymbol(rawValue: "car.top.rearright.arrowtriangle")

    /// 􂂔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carTopRearrightArrowtriangleFill = SFSymbol(rawValue: "car.top.rearright.arrowtriangle.fill")

    /// 􁊜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carWindowLeft = SFSymbol(rawValue: "car.window.left")

    /// 􁊠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carWindowLeftBadgeExclamationmark = SFSymbol(rawValue: "car.window.left.badge.exclamationmark")

    /// 􁊣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carWindowLeftBadgeXmark = SFSymbol(rawValue: "car.window.left.badge.xmark")

    /// 􁊞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carWindowLeftExclamationmark = SFSymbol(rawValue: "car.window.left.exclamationmark")

    /// 􁊡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carWindowLeftXmark = SFSymbol(rawValue: "car.window.left.xmark")

    /// 􁉜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carWindowRight = SFSymbol(rawValue: "car.window.right")

    /// 􁉟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carWindowRightBadgeExclamationmark = SFSymbol(rawValue: "car.window.right.badge.exclamationmark")

    /// 􁉡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carWindowRightBadgeXmark = SFSymbol(rawValue: "car.window.right.badge.xmark")

    /// 􁉞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carWindowRightExclamationmark = SFSymbol(rawValue: "car.window.right.exclamationmark")

    /// 􁊚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carWindowRightXmark = SFSymbol(rawValue: "car.window.right.xmark")

    /// 􁦔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carseatLeft = SFSymbol(rawValue: "carseat.left")

    /// 􁖟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft1 = SFSymbol(rawValue: "carseat.left.1")

    /// 􁖠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft1Fill = SFSymbol(rawValue: "carseat.left.1.fill")

    /// 􁖡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft2 = SFSymbol(rawValue: "carseat.left.2")

    /// 􁖢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft2Fill = SFSymbol(rawValue: "carseat.left.2.fill")

    /// 􁖣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft3 = SFSymbol(rawValue: "carseat.left.3")

    /// 􁖤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeft3Fill = SFSymbol(rawValue: "carseat.left.3.fill")

    /// 􁋍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftAndHeatWaves = SFSymbol(rawValue: "carseat.left.and.heat.waves")

    /// 􁋎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftAndHeatWavesFill = SFSymbol(rawValue: "carseat.left.and.heat.waves.fill")

    /// 􁦌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftBackrestUpAndDown = SFSymbol(rawValue: "carseat.left.backrest.up.and.down")

    /// 􁦍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftBackrestUpAndDownFill = SFSymbol(rawValue: "carseat.left.backrest.up.and.down.fill")

    /// 􁋑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftFan = SFSymbol(rawValue: "carseat.left.fan")

    /// 􁋒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftFanFill = SFSymbol(rawValue: "carseat.left.fan.fill")

    /// 􁦕
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carseatLeftFill = SFSymbol(rawValue: "carseat.left.fill")

    /// 􁦈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftForwardAndBackward = SFSymbol(rawValue: "carseat.left.forward.and.backward")

    /// 􁦉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftForwardAndBackwardFill = SFSymbol(rawValue: "carseat.left.forward.and.backward.fill")

    /// 􁵽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftMassage = SFSymbol(rawValue: "carseat.left.massage")

    /// 􁵾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftMassageFill = SFSymbol(rawValue: "carseat.left.massage.fill")

    /// 􁦐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftUpAndDown = SFSymbol(rawValue: "carseat.left.up.and.down")

    /// 􁦑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatLeftUpAndDownFill = SFSymbol(rawValue: "carseat.left.up.and.down.fill")

    /// 􁦖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carseatRight = SFSymbol(rawValue: "carseat.right")

    /// 􁋕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight1 = SFSymbol(rawValue: "carseat.right.1")

    /// 􁋖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight1Fill = SFSymbol(rawValue: "carseat.right.1.fill")

    /// 􁋗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight2 = SFSymbol(rawValue: "carseat.right.2")

    /// 􁋘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight2Fill = SFSymbol(rawValue: "carseat.right.2.fill")

    /// 􁋙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight3 = SFSymbol(rawValue: "carseat.right.3")

    /// 􁋚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRight3Fill = SFSymbol(rawValue: "carseat.right.3.fill")

    /// 􁋏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightAndHeatWaves = SFSymbol(rawValue: "carseat.right.and.heat.waves")

    /// 􁋐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightAndHeatWavesFill = SFSymbol(rawValue: "carseat.right.and.heat.waves.fill")

    /// 􁦎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightBackrestUpAndDown = SFSymbol(rawValue: "carseat.right.backrest.up.and.down")

    /// 􁦏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightBackrestUpAndDownFill = SFSymbol(rawValue: "carseat.right.backrest.up.and.down.fill")

    /// 􁋓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightFan = SFSymbol(rawValue: "carseat.right.fan")

    /// 􁋔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightFanFill = SFSymbol(rawValue: "carseat.right.fan.fill")

    /// 􁦗
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carseatRightFill = SFSymbol(rawValue: "carseat.right.fill")

    /// 􁦊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightForwardAndBackward = SFSymbol(rawValue: "carseat.right.forward.and.backward")

    /// 􁦋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightForwardAndBackwardFill = SFSymbol(rawValue: "carseat.right.forward.and.backward.fill")

    /// 􁵿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightMassage = SFSymbol(rawValue: "carseat.right.massage")

    /// 􁶀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightMassageFill = SFSymbol(rawValue: "carseat.right.massage.fill")

    /// 􁦒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightUpAndDown = SFSymbol(rawValue: "carseat.right.up.and.down")

    /// 􁦓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carseatRightUpAndDownFill = SFSymbol(rawValue: "carseat.right.up.and.down.fill")

    /// 􂁾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cat = SFSymbol(rawValue: "cat")

    /// 􂂀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let catCircle = SFSymbol(rawValue: "cat.circle")

    /// 􂂁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let catCircleFill = SFSymbol(rawValue: "cat.circle.fill")

    /// 􂁿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let catFill = SFSymbol(rawValue: "cat.fill")

    /// 􂈨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cedisignArrowCirclepath = SFSymbol(rawValue: "cedisign.arrow.circlepath")

    /// 􂈓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let centsignArrowCirclepath = SFSymbol(rawValue: "centsign.arrow.circlepath")

    /// 􀤍
    /// 8 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    /// - Chinese
    /// - Hebrew
    /// - Hindi
    /// - Japanese
    /// - Korean
    /// - Thai
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let characterMagnify = SymbolWith7Localizations<Ar, He, Hi, Ja, Ko, Th, Zh>(rawValue: "character.magnify")

    /// 􂆏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chartBarXaxisAscending = SFSymbol(rawValue: "chart.bar.xaxis.ascending")

    /// 􂆐
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chartBarXaxisAscendingBadgeClock = SymbolWith1Localization<Rtl>(rawValue: "chart.bar.xaxis.ascending.badge.clock")

    /// 􂄗
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let checkmarkApplewatch = SFSymbol(rawValue: "checkmark.applewatch")

    /// 􁣛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let checkmarkGobackward = SFSymbol(rawValue: "checkmark.gobackward")

    /// 􂂼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let checkmarkRectangleStack = SFSymbol(rawValue: "checkmark.rectangle.stack")

    /// 􂂽
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let checkmarkRectangleStackFill = SFSymbol(rawValue: "checkmark.rectangle.stack.fill")

    /// 􁺑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chineseyuanrenminbisign = SFSymbol(rawValue: "chineseyuanrenminbisign")

    /// 􂈳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chineseyuanrenminbisignArrowCirclepath = SFSymbol(rawValue: "chineseyuanrenminbisign.arrow.circlepath")

    /// 􀯣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chineseyuanrenminbisignCircle = SFSymbol(rawValue: "chineseyuanrenminbisign.circle")

    /// 􀯤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chineseyuanrenminbisignCircleFill = SFSymbol(rawValue: "chineseyuanrenminbisign.circle.fill")

    /// 􀯥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chineseyuanrenminbisignSquare = SFSymbol(rawValue: "chineseyuanrenminbisign.square")

    /// 􀯦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chineseyuanrenminbisignSquareFill = SFSymbol(rawValue: "chineseyuanrenminbisign.square.fill")

    /// 􂀂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeCheckmark = SFSymbol(rawValue: "circle.badge.checkmark")

    /// 􂀃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeCheckmarkFill = SFSymbol(rawValue: "circle.badge.checkmark.fill")

    /// 􂁔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeExclamationmark = SFSymbol(rawValue: "circle.badge.exclamationmark")

    /// 􂁕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeExclamationmarkFill = SFSymbol(rawValue: "circle.badge.exclamationmark.fill")

    /// 􂁄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeMinus = SFSymbol(rawValue: "circle.badge.minus")

    /// 􂁅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeMinusFill = SFSymbol(rawValue: "circle.badge.minus.fill")

    /// 􂁀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgePlus = SFSymbol(rawValue: "circle.badge.plus")

    /// 􂁁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgePlusFill = SFSymbol(rawValue: "circle.badge.plus.fill")

    /// 􂁌
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "circle.badge.questionmark")

    /// 􂁍
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeQuestionmarkFill = SymbolWith1Localization<Ar>(rawValue: "circle.badge.questionmark.fill")

    /// 􂁈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeXmark = SFSymbol(rawValue: "circle.badge.xmark")

    /// 􂁉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleBadgeXmarkFill = SFSymbol(rawValue: "circle.badge.xmark.fill")

    /// 􁹰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleBottomhalfFilledInverse = SFSymbol(rawValue: "circle.bottomhalf.filled.inverse")

    /// 􁹨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleBottomrighthalfCheckered = SFSymbol(rawValue: "circle.bottomrighthalf.checkered")

    /// 􁊕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleDottedAndCircle = SFSymbol(rawValue: "circle.dotted.and.circle")

    /// 􁹧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleDottedCircle = SFSymbol(rawValue: "circle.dotted.circle")

    /// 􁷟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleDottedCircleFill = SFSymbol(rawValue: "circle.dotted.circle.fill")

    /// 􂃻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleFilledIpad = SFSymbol(rawValue: "circle.filled.ipad")

    /// 􂃼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleFilledIpadFill = SFSymbol(rawValue: "circle.filled.ipad.fill")

    /// 􂃽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleFilledIpadLandscape = SFSymbol(rawValue: "circle.filled.ipad.landscape")

    /// 􂃾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleFilledIpadLandscapeFill = SFSymbol(rawValue: "circle.filled.ipad.landscape.fill")

    /// 􂃯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleFilledIphone = SFSymbol(rawValue: "circle.filled.iphone")

    /// 􂃰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let circleFilledIphoneFill = SFSymbol(rawValue: "circle.filled.iphone.fill")

    /// 􁹭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleLefthalfFilledInverse = SFSymbol(rawValue: "circle.lefthalf.filled.inverse")

    /// 􁹣
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleLefthalfFilledRighthalfStripedHorizontal = SFSymbol(rawValue: "circle.lefthalf.filled.righthalf.striped.horizontal")

    /// 􁹤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleLefthalfFilledRighthalfStripedHorizontalInverse = SFSymbol(rawValue: "circle.lefthalf.filled.righthalf.striped.horizontal.inverse")

    /// 􁹥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleLefthalfStripedHorizontal = SFSymbol(rawValue: "circle.lefthalf.striped.horizontal")

    /// 􁹦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleLefthalfStripedHorizontalInverse = SFSymbol(rawValue: "circle.lefthalf.striped.horizontal.inverse")

    /// 􁹮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleRighthalfFilledInverse = SFSymbol(rawValue: "circle.righthalf.filled.inverse")

    /// 􁹯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleTophalfFilledInverse = SFSymbol(rawValue: "circle.tophalf.filled.inverse")

    /// 􁷞
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudRainbowHalf = SFSymbol(rawValue: "cloud.rainbow.half")

    /// 􁷠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudRainbowHalfFill = SFSymbol(rawValue: "cloud.rainbow.half.fill")

    /// 􂈧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let coloncurrencysignArrowCirclepath = SFSymbol(rawValue: "coloncurrencysign.arrow.circlepath")

    /// 􁣐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let creditcardTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "creditcard.trianglebadge.exclamationmark.fill")

    /// 􂈩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cruzeirosignArrowCirclepath = SFSymbol(rawValue: "cruzeirosign.arrow.circlepath")

    /// 􁷁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cursorarrowSlash = SFSymbol(rawValue: "cursorarrow.slash")

    /// 􁷂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cursorarrowSlashSquare = SFSymbol(rawValue: "cursorarrow.slash.square")

    /// 􁷃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cursorarrowSlashSquareFill = SFSymbol(rawValue: "cursorarrow.slash.square.fill")

    /// 􁤮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let danishkronesign = SFSymbol(rawValue: "danishkronesign")

    /// 􂈷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let danishkronesignArrowCirclepath = SFSymbol(rawValue: "danishkronesign.arrow.circlepath")

    /// 􀮬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let danishkronesignCircle = SFSymbol(rawValue: "danishkronesign.circle")

    /// 􀮭
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let danishkronesignCircleFill = SFSymbol(rawValue: "danishkronesign.circle.fill")

    /// 􀮮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let danishkronesignSquare = SFSymbol(rawValue: "danishkronesign.square")

    /// 􀮯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let danishkronesignSquareFill = SFSymbol(rawValue: "danishkronesign.square.fill")

    /// 􁿖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dishwasherCircle = SFSymbol(rawValue: "dishwasher.circle")

    /// 􁿗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let dishwasherCircleFill = SFSymbol(rawValue: "dishwasher.circle.fill")

    /// 􀫾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let docBadgeClock = SFSymbol(rawValue: "doc.badge.clock")

    /// 􀫿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let docBadgeClockFill = SFSymbol(rawValue: "doc.badge.clock.fill")

    /// 􂇲
    /// 3 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Arabic
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let docQuestionmark = SymbolWith2Localizations<Ar, Rtl>(rawValue: "doc.questionmark")

    /// 􂇳
    /// 3 Localizations, Single Layerset
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Arabic
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    static let docQuestionmarkFill = SymbolWith2Localizations<Ar, Rtl>(rawValue: "doc.questionmark.fill")

    /// 􂀆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dog = SFSymbol(rawValue: "dog")

    /// 􂀾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dogCircle = SFSymbol(rawValue: "dog.circle")

    /// 􂀿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let dogCircleFill = SFSymbol(rawValue: "dog.circle.fill")

    /// 􂀇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dogFill = SFSymbol(rawValue: "dog.fill")

    /// 􂈛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dongsignArrowCirclepath = SFSymbol(rawValue: "dongsign.arrow.circlepath")

    /// 􂇏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dotScope = SFSymbol(rawValue: "dot.scope")

    /// 􂇌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dotScopeDisplay = SFSymbol(rawValue: "dot.scope.display")

    /// 􁿍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dotScopeLaptopcomputer = SFSymbol(rawValue: "dot.scope.laptopcomputer")

    /// 􁹡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dropHalffull = SFSymbol(rawValue: "drop.halffull")

    /// 􁤈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dropTransmission = SFSymbol(rawValue: "drop.transmission")

    /// 􁿒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dryerCircle = SFSymbol(rawValue: "dryer.circle")

    /// 􁿓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let dryerCircleFill = SFSymbol(rawValue: "dryer.circle.fill")

    /// 􀵣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let earBadgeWaveform = SFSymbol(rawValue: "ear.badge.waveform")

    /// 􁊦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let engineCombustionBadgeExclamationmark = SFSymbol(rawValue: "engine.combustion.badge.exclamationmark")

    /// 􁊧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let engineCombustionBadgeExclamationmarkFill = SFSymbol(rawValue: "engine.combustion.badge.exclamationmark.fill")

    /// 􁷻
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let envelopeBadgePersonCrop = SFSymbol(rawValue: "envelope.badge.person.crop")

    /// 􁷽
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let envelopeBadgePersonCropFill = SFSymbol(rawValue: "envelope.badge.person.crop.fill")

    /// 􂈚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eurosignArrowCirclepath = SFSymbol(rawValue: "eurosign.arrow.circlepath")

    /// 􁤴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let eurozonesign = SFSymbol(rawValue: "eurozonesign")

    /// 􂈸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eurozonesignArrowCirclepath = SFSymbol(rawValue: "eurozonesign.arrow.circlepath")

    /// 􁤵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eurozonesignCircle = SFSymbol(rawValue: "eurozonesign.circle")

    /// 􁤶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let eurozonesignCircleFill = SFSymbol(rawValue: "eurozonesign.circle.fill")

    /// 􁤷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eurozonesignSquare = SFSymbol(rawValue: "eurozonesign.square")

    /// 􁤸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let eurozonesignSquareFill = SFSymbol(rawValue: "eurozonesign.square.fill")

    /// 􁊨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let evCharger = SFSymbol(rawValue: "ev.charger")

    /// 􁰪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerArrowtriangleLeft = SFSymbol(rawValue: "ev.charger.arrowtriangle.left")

    /// 􁰫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerArrowtriangleLeftFill = SFSymbol(rawValue: "ev.charger.arrowtriangle.left.fill")

    /// 􁰲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerArrowtriangleRight = SFSymbol(rawValue: "ev.charger.arrowtriangle.right")

    /// 􁰳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerArrowtriangleRightFill = SFSymbol(rawValue: "ev.charger.arrowtriangle.right.fill")

    /// 􁰶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerExclamationmark = SFSymbol(rawValue: "ev.charger.exclamationmark")

    /// 􁰷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerExclamationmarkFill = SFSymbol(rawValue: "ev.charger.exclamationmark.fill")

    /// 􁊩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let evChargerFill = SFSymbol(rawValue: "ev.charger.fill")

    /// 􁰦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerSlash = SFSymbol(rawValue: "ev.charger.slash")

    /// 􁰧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evChargerSlashFill = SFSymbol(rawValue: "ev.charger.slash.fill")

    /// 􁺰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcGbT = SFSymbol(rawValue: "ev.plug.ac.gb.t")

    /// 􁺱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcGbTFill = SFSymbol(rawValue: "ev.plug.ac.gb.t.fill")

    /// 􁺬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcType1 = SFSymbol(rawValue: "ev.plug.ac.type.1")

    /// 􁺭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcType1Fill = SFSymbol(rawValue: "ev.plug.ac.type.1.fill")

    /// 􁺮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcType2 = SFSymbol(rawValue: "ev.plug.ac.type.2")

    /// 􁺯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugAcType2Fill = SFSymbol(rawValue: "ev.plug.ac.type.2.fill")

    /// 􁺲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcCcs1 = SFSymbol(rawValue: "ev.plug.dc.ccs1")

    /// 􁺳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcCcs1Fill = SFSymbol(rawValue: "ev.plug.dc.ccs1.fill")

    /// 􁺴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcCcs2 = SFSymbol(rawValue: "ev.plug.dc.ccs2")

    /// 􁺵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcCcs2Fill = SFSymbol(rawValue: "ev.plug.dc.ccs2.fill")

    /// 􁺶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcChademo = SFSymbol(rawValue: "ev.plug.dc.chademo")

    /// 􁺷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcChademoFill = SFSymbol(rawValue: "ev.plug.dc.chademo.fill")

    /// 􁺸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcGbT = SFSymbol(rawValue: "ev.plug.dc.gb.t")

    /// 􁺹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcGbTFill = SFSymbol(rawValue: "ev.plug.dc.gb.t.fill")

    /// 􁺺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcNacs = SFSymbol(rawValue: "ev.plug.dc.nacs")

    /// 􁺻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let evPlugDcNacsFill = SFSymbol(rawValue: "ev.plug.dc.nacs.fill")

    /// 􂈂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let exclamationmarkMagnifyingglass = SFSymbol(rawValue: "exclamationmark.magnifyingglass")

    /// 􁀓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let exclamationmarkTirepressure = SFSymbol(rawValue: "exclamationmark.tirepressure")

    /// 􁀮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let exclamationmarkWarninglight = SFSymbol(rawValue: "exclamationmark.warninglight")

    /// 􁀯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let exclamationmarkWarninglightFill = SFSymbol(rawValue: "exclamationmark.warninglight.fill")

    /// 􂀶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eyeglassesSlash = SFSymbol(rawValue: "eyeglasses.slash")

    /// 􁁋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fan = SFSymbol(rawValue: "fan")

    /// 􁲉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let fanBadgeAutomatic = SFSymbol(rawValue: "fan.badge.automatic")

    /// 􁲊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let fanBadgeAutomaticFill = SFSymbol(rawValue: "fan.badge.automatic.fill")

    /// 􁁌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fanFill = SFSymbol(rawValue: "fan.fill")

    /// 􁝚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanSlash = SFSymbol(rawValue: "fan.slash")

    /// 􁝛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanSlashFill = SFSymbol(rawValue: "fan.slash.fill")

    /// 􁿼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let fieldOfViewUltrawide = SFSymbol(rawValue: "field.of.view.ultrawide")

    /// 􁿽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fieldOfViewUltrawideFill = SFSymbol(rawValue: "field.of.view.ultrawide.fill")

    /// 􁿾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let fieldOfViewWide = SFSymbol(rawValue: "field.of.view.wide")

    /// 􁿿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fieldOfViewWideFill = SFSymbol(rawValue: "field.of.view.wide.fill")

    /// 􀕽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figure = SFSymbol(rawValue: "figure")

    /// 􀘷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figure2 = SFSymbol(rawValue: "figure.2")

    /// 􀹽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figure2Circle = SFSymbol(rawValue: "figure.2.circle")

    /// 􀹾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let figure2CircleFill = SFSymbol(rawValue: "figure.2.circle.fill")

    /// 􁣽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureChild = SFSymbol(rawValue: "figure.child")

    /// 􁥾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureChildAndLock = SFSymbol(rawValue: "figure.child.and.lock")

    /// 􁥿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureChildAndLockFill = SFSymbol(rawValue: "figure.child.and.lock.fill")

    /// 􁦀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureChildAndLockOpen = SFSymbol(rawValue: "figure.child.and.lock.open")

    /// 􁦁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureChildAndLockOpenFill = SFSymbol(rawValue: "figure.child.and.lock.open.fill")

    /// 􁣾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureChildCircle = SFSymbol(rawValue: "figure.child.circle")

    /// 􁣿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let figureChildCircleFill = SFSymbol(rawValue: "figure.child.circle.fill")

    /// 􁺼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSeatedSide = SFSymbol(rawValue: "figure.seated.side")

    /// 􁁶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionLower = SFSymbol(rawValue: "figure.seated.side.air.distribution.lower")

    /// 􁁵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionMiddle = SFSymbol(rawValue: "figure.seated.side.air.distribution.middle")

    /// 􁁸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionMiddleAndLower = SFSymbol(rawValue: "figure.seated.side.air.distribution.middle.and.lower")

    /// 􁻀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionMiddleAndLowerAngled = SFSymbol(rawValue: "figure.seated.side.air.distribution.middle.and.lower.angled")

    /// 􁁷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionUpper = SFSymbol(rawValue: "figure.seated.side.air.distribution.upper")

    /// 􁺿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionUpperAngledAndLowerAngled = SFSymbol(rawValue: "figure.seated.side.air.distribution.upper.angled.and.lower.angled")

    /// 􁺾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionUpperAngledAndMiddle = SFSymbol(rawValue: "figure.seated.side.air.distribution.upper.angled.and.middle")

    /// 􁺽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAirDistributionUpperAngledAndMiddleAndLowerAngled = SFSymbol(rawValue: "figure.seated.side.air.distribution.upper.angled.and.middle.and.lower.angled")

    /// 􁲍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideAutomatic = SFSymbol(rawValue: "figure.seated.side.automatic")

    /// 􁻒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionLower = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.lower")

    /// 􁻑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddle = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.middle")

    /// 􁻍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionMiddleAndLower = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.middle.and.lower")

    /// 􁻐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpper = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.upper")

    /// 􁻏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndLower = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.upper.and.lower")

    /// 􁻎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddle = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.upper.and.middle")

    /// 􁻌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureSeatedSideWindshieldFrontAndHeatWavesAirDistributionUpperAndMiddleAndLower = SFSymbol(rawValue: "figure.seated.side.windshield.front.and.heat.waves.air.distribution.upper.and.middle.and.lower")

    /// 􁷚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let figureWalkMotionTrianglebadgeExclamationmark = SFSymbol(rawValue: "figure.walk.motion.trianglebadge.exclamationmark")

    /// 􂁞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fireworks = SFSymbol(rawValue: "fireworks")

    /// 􂃱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let flashlightOffCircle = SFSymbol(rawValue: "flashlight.off.circle")

    /// 􂃲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let flashlightOffCircleFill = SFSymbol(rawValue: "flashlight.off.circle.fill")

    /// 􂃳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let flashlightOnCircle = SFSymbol(rawValue: "flashlight.on.circle")

    /// 􂃴
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let flashlightOnCircleFill = SFSymbol(rawValue: "flashlight.on.circle.fill")

    /// 􂃵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let flashlightSlash = SFSymbol(rawValue: "flashlight.slash")

    /// 􂃶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let flashlightSlashCircle = SFSymbol(rawValue: "flashlight.slash.circle")

    /// 􂃷
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let flashlightSlashCircleFill = SFSymbol(rawValue: "flashlight.slash.circle.fill")

    /// 􁰍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let flask = SFSymbol(rawValue: "flask")

    /// 􁰎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let flaskFill = SFSymbol(rawValue: "flask.fill")

    /// 􂈗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let florinsignArrowCirclepath = SFSymbol(rawValue: "florinsign.arrow.circlepath")

    /// 􂈖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let francsignArrowCirclepath = SFSymbol(rawValue: "francsign.arrow.circlepath")

    /// 􁈾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpArrowtriangleLeft = SFSymbol(rawValue: "fuelpump.arrowtriangle.left")

    /// 􁈿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpArrowtriangleLeftFill = SFSymbol(rawValue: "fuelpump.arrowtriangle.left.fill")

    /// 􁈼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpArrowtriangleRight = SFSymbol(rawValue: "fuelpump.arrowtriangle.right")

    /// 􁈽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpArrowtriangleRightFill = SFSymbol(rawValue: "fuelpump.arrowtriangle.right.fill")

    /// 􁥦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpExclamationmark = SFSymbol(rawValue: "fuelpump.exclamationmark")

    /// 􁥧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpExclamationmarkFill = SFSymbol(rawValue: "fuelpump.exclamationmark.fill")

    /// 􁰚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpSlash = SFSymbol(rawValue: "fuelpump.slash")

    /// 􁰛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fuelpumpSlashFill = SFSymbol(rawValue: "fuelpump.slash.fill")

    /// 􁫏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle33percent = SFSymbol(rawValue: "gauge.open.with.lines.needle.33percent")

    /// 􁉰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle33percentAndArrowtriangle = SFSymbol(rawValue: "gauge.open.with.lines.needle.33percent.and.arrowtriangle")

    /// 􁊐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle33percentAndArrowtriangleFrom0percentTo50percent = SFSymbol(rawValue: "gauge.open.with.lines.needle.33percent.and.arrowtriangle.from.0percent.to.50percent")

    /// 􁖗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle67percentAndArrowtriangle = SFSymbol(rawValue: "gauge.open.with.lines.needle.67percent.and.arrowtriangle")

    /// 􁖜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle67percentAndArrowtriangleAndCar = SFSymbol(rawValue: "gauge.open.with.lines.needle.67percent.and.arrowtriangle.and.car")

    /// 􁖘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeOpenWithLinesNeedle84percentExclamation = SFSymbol(rawValue: "gauge.open.with.lines.needle.84percent.exclamation")

    /// 􁐙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedle0percent = SFSymbol(rawValue: "gauge.with.dots.needle.0percent")

    /// 􁐛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedle100percent = SFSymbol(rawValue: "gauge.with.dots.needle.100percent")

    /// 􁰉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedle33percent = SFSymbol(rawValue: "gauge.with.dots.needle.33percent")

    /// 􁐚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedle50percent = SFSymbol(rawValue: "gauge.with.dots.needle.50percent")

    /// 􀍾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedle67percent = SFSymbol(rawValue: "gauge.with.dots.needle.67percent")

    /// 􁐗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedleBottom0percent = SFSymbol(rawValue: "gauge.with.dots.needle.bottom.0percent")

    /// 􁐘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedleBottom100percent = SFSymbol(rawValue: "gauge.with.dots.needle.bottom.100percent")

    /// 􀍽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithDotsNeedleBottom50percent = SFSymbol(rawValue: "gauge.with.dots.needle.bottom.50percent")

    /// 􀓧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    /// - Hierarchical
    static let gaugeWithDotsNeedleBottom50percentBadgeMinus = SFSymbol(rawValue: "gauge.with.dots.needle.bottom.50percent.badge.minus")

    /// 􀓓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    /// - Hierarchical
    static let gaugeWithDotsNeedleBottom50percentBadgePlus = SFSymbol(rawValue: "gauge.with.dots.needle.bottom.50percent.badge.plus")

    /// 􁖫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithNeedle = SFSymbol(rawValue: "gauge.with.needle")

    /// 􁖬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeWithNeedleFill = SFSymbol(rawValue: "gauge.with.needle.fill")

    /// 􁸝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let gearshiftLayoutSixspeed = SFSymbol(rawValue: "gearshift.layout.sixspeed")

    /// 􂈦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let guaranisignArrowCirclepath = SFSymbol(rawValue: "guaranisign.arrow.circlepath")

    /// 􂂱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let gymBag = SFSymbol(rawValue: "gym.bag")

    /// 􂂲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let gymBagFill = SFSymbol(rawValue: "gym.bag.fill")

    /// 􁾀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let handPointUpLeftAndText = SFSymbol(rawValue: "hand.point.up.left.and.text")

    /// 􁾁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let handPointUpLeftAndTextFill = SFSymbol(rawValue: "hand.point.up.left.and.text.fill")

    /// 􁿜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let handbagCircle = SFSymbol(rawValue: "handbag.circle")

    /// 􁿝
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let handbagCircleFill = SFSymbol(rawValue: "handbag.circle.fill")

    /// 􀲮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let handsAndSparkles = SFSymbol(rawValue: "hands.and.sparkles")

    /// 􀲯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let handsAndSparklesFill = SFSymbol(rawValue: "hands.and.sparkles.fill")

    /// 􀠖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hanger = SFSymbol(rawValue: "hanger")

    /// 􂀸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hareCircle = SFSymbol(rawValue: "hare.circle")

    /// 􂀹
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hareCircleFill = SFSymbol(rawValue: "hare.circle.fill")

    /// 􁟹
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let headProfileArrowForwardAndVisionpro = SFSymbol(rawValue: "head.profile.arrow.forward.and.visionpro")

    /// 􁰹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let heatWaves = SFSymbol(rawValue: "heat.waves")

    /// 􁄵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let horn = SFSymbol(rawValue: "horn")

    /// 􁄷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hornBlast = SFSymbol(rawValue: "horn.blast")

    /// 􁄸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hornBlastFill = SFSymbol(rawValue: "horn.blast.fill")

    /// 􁄶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hornFill = SFSymbol(rawValue: "horn.fill")

    /// 􂇗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hourglassAndLock = SFSymbol(rawValue: "hourglass.and.lock")

    /// 􂈤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hryvniasignArrowCirclepath = SFSymbol(rawValue: "hryvniasign.arrow.circlepath")

    /// 􂈜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let indianrupeesignArrowCirclepath = SFSymbol(rawValue: "indianrupeesign.arrow.circlepath")

    /// 􁤩
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPad case.
    static let ipadCase = SFSymbol(rawValue: "ipad.case")

    /// 􁤪
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPad and iPhone case.
    static let ipadCaseAndIphoneCase = SFSymbol(rawValue: "ipad.case.and.iphone.case")

    /// 􁣶
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPad.
    static let ipadSizes = SFSymbol(rawValue: "ipad.sizes")

    /// 􁰿
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneAndArrowLeftAndArrowRight = SFSymbol(rawValue: "iphone.and.arrow.left.and.arrow.right")

    /// 􁤨
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone case.
    static let iphoneCase = SFSymbol(rawValue: "iphone.case")

    /// 􁣴
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneSizes = SFSymbol(rawValue: "iphone.sizes")

    /// 􂃜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let kashidaArabic = SFSymbol(rawValue: "kashida.arabic")

    /// 􂇮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keyRadiowavesForwardSlash = SFSymbol(rawValue: "key.radiowaves.forward.slash")

    /// 􂇰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keyRadiowavesForwardSlashFill = SFSymbol(rawValue: "key.radiowaves.forward.slash.fill")

    /// 􂅦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keySlash = SFSymbol(rawValue: "key.slash")

    /// 􂅧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keySlashFill = SFSymbol(rawValue: "key.slash.fill")

    /// 􂈠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let kipsignArrowCirclepath = SFSymbol(rawValue: "kipsign.arrow.circlepath")

    /// 􀨇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lButtonRoundedbottomHorizontal = SFSymbol(rawValue: "l.button.roundedbottom.horizontal")

    /// 􀨈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "l.button.roundedbottom.horizontal.fill")

    /// 􀨉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l1ButtonRoundedbottomHorizontal = SFSymbol(rawValue: "l1.button.roundedbottom.horizontal")

    /// 􀨊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l1ButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "l1.button.roundedbottom.horizontal.fill")

    /// 􁺁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l1Circle = SFSymbol(rawValue: "l1.circle")

    /// 􁺂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l1CircleFill = SFSymbol(rawValue: "l1.circle.fill")

    /// 􁷳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l2ButtonAngledtopVerticalLeft = SFSymbol(rawValue: "l2.button.angledtop.vertical.left")

    /// 􁷴
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l2ButtonAngledtopVerticalLeftFill = SFSymbol(rawValue: "l2.button.angledtop.vertical.left.fill")

    /// 􀨋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l2ButtonRoundedtopHorizontal = SFSymbol(rawValue: "l2.button.roundedtop.horizontal")

    /// 􀨌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l2ButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "l2.button.roundedtop.horizontal.fill")

    /// 􁺅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l2Circle = SFSymbol(rawValue: "l2.circle")

    /// 􁺆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l2CircleFill = SFSymbol(rawValue: "l2.circle.fill")

    /// 􁸇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l3ButtonAngledbottomHorizontalLeft = SFSymbol(rawValue: "l3.button.angledbottom.horizontal.left")

    /// 􁸈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l3ButtonAngledbottomHorizontalLeftFill = SFSymbol(rawValue: "l3.button.angledbottom.horizontal.left.fill")

    /// 􁸠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let l4ButtonHorizontal = SFSymbol(rawValue: "l4.button.horizontal")

    /// 􁸡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let l4ButtonHorizontalFill = SFSymbol(rawValue: "l4.button.horizontal.fill")

    /// 􁼛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let ladybugCircle = SFSymbol(rawValue: "ladybug.circle")

    /// 􁼜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let ladybugCircleFill = SFSymbol(rawValue: "ladybug.circle.fill")

    /// 􂈰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let larisignArrowCirclepath = SFSymbol(rawValue: "larisign.arrow.circlepath")

    /// 􂁝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let laserBurst = SFSymbol(rawValue: "laser.burst")

    /// 􀣳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lassoBadgeSparkles = SFSymbol(rawValue: "lasso.badge.sparkles")

    /// 􀨓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lbButtonRoundedbottomHorizontal = SFSymbol(rawValue: "lb.button.roundedbottom.horizontal")

    /// 􀨔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lbButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "lb.button.roundedbottom.horizontal.fill")

    /// 􁺃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lbCircle = SFSymbol(rawValue: "lb.circle")

    /// 􁺄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lbCircleFill = SFSymbol(rawValue: "lb.circle.fill")

    /// 􁣣
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let left = SFSymbol(rawValue: "left")

    /// 􁣤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let leftCircle = SFSymbol(rawValue: "left.circle")

    /// 􁣥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let leftCircleFill = SFSymbol(rawValue: "left.circle.fill")

    /// 􁺪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let licenseplate = SFSymbol(rawValue: "licenseplate")

    /// 􁺫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let licenseplateFill = SFSymbol(rawValue: "licenseplate.fill")

    /// 􁷘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightbulbMax = SFSymbol(rawValue: "lightbulb.max")

    /// 􁷙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightbulbMaxFill = SFSymbol(rawValue: "lightbulb.max.fill")

    /// 􁷖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightbulbMin = SFSymbol(rawValue: "lightbulb.min")

    /// 􁹄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightbulbMinBadgeExclamationmark = SFSymbol(rawValue: "lightbulb.min.badge.exclamationmark")

    /// 􁹅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightbulbMinBadgeExclamationmarkFill = SFSymbol(rawValue: "lightbulb.min.badge.exclamationmark.fill")

    /// 􁷗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightbulbMinFill = SFSymbol(rawValue: "lightbulb.min.fill")

    /// 􀷺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightrail = SFSymbol(rawValue: "lightrail")

    /// 􀷻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightrailFill = SFSymbol(rawValue: "lightrail.fill")

    /// 􁹩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let lightspectrumHorizontal = SFSymbol(rawValue: "lightspectrum.horizontal")

    /// 􁷹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let line3HorizontalButtonAngledtopVerticalRight = SFSymbol(rawValue: "line.3.horizontal.button.angledtop.vertical.right")

    /// 􁷺
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let line3HorizontalButtonAngledtopVerticalRightFill = SFSymbol(rawValue: "line.3.horizontal.button.angledtop.vertical.right.fill")

    /// 􂀙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let linesMeasurementVertical = SFSymbol(rawValue: "lines.measurement.vertical")

    /// 􂈢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lirasignArrowCirclepath = SFSymbol(rawValue: "lirasign.arrow.circlepath")

    /// 􀙔
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Live Photos feature.
    static let livephotoBadgeAutomatic = SFSymbol(rawValue: "livephoto.badge.automatic")

    /// 􁼵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lizardCircle = SFSymbol(rawValue: "lizard.circle")

    /// 􁼶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lizardCircleFill = SFSymbol(rawValue: "lizard.circle.fill")

    /// 􁸢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lmButtonHorizontal = SFSymbol(rawValue: "lm.button.horizontal")

    /// 􁸣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lmButtonHorizontalFill = SFSymbol(rawValue: "lm.button.horizontal.fill")

    /// 􁰏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lockAppDashed = SFSymbol(rawValue: "lock.app.dashed")

    /// 􂆉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockBadgeClock = SFSymbol(rawValue: "lock.badge.clock")

    /// 􂆊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockBadgeClockFill = SFSymbol(rawValue: "lock.badge.clock.fill")

    /// 􂄜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lockCircleDotted = SFSymbol(rawValue: "lock.circle.dotted")

    /// 􁸋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lsbButtonAngledbottomHorizontalLeft = SFSymbol(rawValue: "lsb.button.angledbottom.horizontal.left")

    /// 􁸌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lsbButtonAngledbottomHorizontalLeftFill = SFSymbol(rawValue: "lsb.button.angledbottom.horizontal.left.fill")

    /// 􀨗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let ltButtonRoundedtopHorizontal = SFSymbol(rawValue: "lt.button.roundedtop.horizontal")

    /// 􀨘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let ltButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "lt.button.roundedtop.horizontal.fill")

    /// 􁺇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let ltCircle = SFSymbol(rawValue: "lt.circle")

    /// 􁺈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let ltCircleFill = SFSymbol(rawValue: "lt.circle.fill")

    /// 􁸤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let m1ButtonHorizontal = SFSymbol(rawValue: "m1.button.horizontal")

    /// 􁸥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let m1ButtonHorizontalFill = SFSymbol(rawValue: "m1.button.horizontal.fill")

    /// 􁸦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let m2ButtonHorizontal = SFSymbol(rawValue: "m2.button.horizontal")

    /// 􁸧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let m2ButtonHorizontalFill = SFSymbol(rawValue: "m2.button.horizontal.fill")

    /// 􁸨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let m3ButtonHorizontal = SFSymbol(rawValue: "m3.button.horizontal")

    /// 􁸩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let m3ButtonHorizontalFill = SFSymbol(rawValue: "m3.button.horizontal.fill")

    /// 􁸪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let m4ButtonHorizontal = SFSymbol(rawValue: "m4.button.horizontal")

    /// 􁸫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let m4ButtonHorizontalFill = SFSymbol(rawValue: "m4.button.horizontal.fill")

    /// 􁟬
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s MacBook.
    static let macbook = SFSymbol(rawValue: "macbook")

    /// 􁜙
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro and MacBook.
    static let macbookAndVisionpro = SFSymbol(rawValue: "macbook.and.visionpro")

    /// 􁟫
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s MacBook.
    static let macbookGen1 = SFSymbol(rawValue: "macbook.gen1")

    /// 􁈸
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s MacBook.
    static let macbookGen2 = SFSymbol(rawValue: "macbook.gen2")

    /// 􁝸
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let macwindowAndCursorarrow = SymbolWith1Localization<Rtl>(rawValue: "macwindow.and.cursorarrow")

    /// 􂈭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let manatsignArrowCirclepath = SFSymbol(rawValue: "manatsign.arrow.circlepath")

    /// 􁼡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let mappinAndEllipseCircle = SFSymbol(rawValue: "mappin.and.ellipse.circle")

    /// 􁼢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let mappinAndEllipseCircleFill = SFSymbol(rawValue: "mappin.and.ellipse.circle.fill")

    /// 􀼁
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeWaveform = SFSymbol(rawValue: "message.badge.waveform")

    /// 􀼂
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeWaveformFill = SFSymbol(rawValue: "message.badge.waveform.fill")

    /// 􂈫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let millsignArrowCirclepath = SFSymbol(rawValue: "millsign.arrow.circlepath")

    /// 􁶽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonDust = SFSymbol(rawValue: "moon.dust")

    /// 􁶿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonDustCircle = SFSymbol(rawValue: "moon.dust.circle")

    /// 􁷀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonDustCircleFill = SFSymbol(rawValue: "moon.dust.circle.fill")

    /// 􁶾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonDustFill = SFSymbol(rawValue: "moon.dust.fill")

    /// 􂂳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonrise = SFSymbol(rawValue: "moonrise")

    /// 􂂵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonriseCircle = SFSymbol(rawValue: "moonrise.circle")

    /// 􂂶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonriseCircleFill = SFSymbol(rawValue: "moonrise.circle.fill")

    /// 􂂴
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonriseFill = SFSymbol(rawValue: "moonrise.fill")

    /// 􂂷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonset = SFSymbol(rawValue: "moonset")

    /// 􂂹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonsetCircle = SFSymbol(rawValue: "moonset.circle")

    /// 􂂺
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonsetCircleFill = SFSymbol(rawValue: "moonset.circle.fill")

    /// 􂂸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonsetFill = SFSymbol(rawValue: "moonset.fill")

    /// 􀜤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let movieclapper = SFSymbol(rawValue: "movieclapper")

    /// 􁶺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let movieclapperFill = SFSymbol(rawValue: "movieclapper.fill")

    /// 􂈥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let nairasignArrowCirclepath = SFSymbol(rawValue: "nairasign.arrow.circlepath")

    /// 􁣡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let networkSlash = SFSymbol(rawValue: "network.slash")

    /// 􁤬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let norwegiankronesign = SFSymbol(rawValue: "norwegiankronesign")

    /// 􂈵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let norwegiankronesignArrowCirclepath = SFSymbol(rawValue: "norwegiankronesign.arrow.circlepath")

    /// 􀮤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let norwegiankronesignCircle = SFSymbol(rawValue: "norwegiankronesign.circle")

    /// 􀮥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let norwegiankronesignCircleFill = SFSymbol(rawValue: "norwegiankronesign.circle.fill")

    /// 􀮦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let norwegiankronesignSquare = SFSymbol(rawValue: "norwegiankronesign.square")

    /// 􀮧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let norwegiankronesignSquareFill = SFSymbol(rawValue: "norwegiankronesign.square.fill")

    /// 􁢙
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Optic ID feature.
    static let opticid = SFSymbol(rawValue: "opticid")

    /// 􁣂
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Optic ID feature.
    static let opticidFill = SFSymbol(rawValue: "opticid.fill")

    /// 􁸬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let p1ButtonHorizontal = SFSymbol(rawValue: "p1.button.horizontal")

    /// 􁸭
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let p1ButtonHorizontalFill = SFSymbol(rawValue: "p1.button.horizontal.fill")

    /// 􁸮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let p2ButtonHorizontal = SFSymbol(rawValue: "p2.button.horizontal")

    /// 􁸯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let p2ButtonHorizontalFill = SFSymbol(rawValue: "p2.button.horizontal.fill")

    /// 􁸰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let p3ButtonHorizontal = SFSymbol(rawValue: "p3.button.horizontal")

    /// 􁸱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let p3ButtonHorizontalFill = SFSymbol(rawValue: "p3.button.horizontal.fill")

    /// 􁸲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let p4ButtonHorizontal = SFSymbol(rawValue: "p4.button.horizontal")

    /// 􁸳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let p4ButtonHorizontalFill = SFSymbol(rawValue: "p4.button.horizontal.fill")

    /// 􁸴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let paddleshifterLeft = SFSymbol(rawValue: "paddleshifter.left")

    /// 􁸵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let paddleshifterLeftFill = SFSymbol(rawValue: "paddleshifter.left.fill")

    /// 􁸶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let paddleshifterRight = SFSymbol(rawValue: "paddleshifter.right")

    /// 􁸷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let paddleshifterRightFill = SFSymbol(rawValue: "paddleshifter.right.fill")

    /// 􁷿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let panoBadgePlay = SFSymbol(rawValue: "pano.badge.play")

    /// 􁸀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let panoBadgePlayFill = SFSymbol(rawValue: "pano.badge.play.fill")

    /// 􁖲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let parkingsignRadiowavesLeftAndRight = SFSymbol(rawValue: "parkingsign.radiowaves.left.and.right")

    /// 􁥨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let parkingsignRadiowavesRightAndSafetycone = SFSymbol(rawValue: "parkingsign.radiowaves.right.and.safetycone")

    /// 􁉨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let parkingsignSteeringwheel = SFSymbol(rawValue: "parkingsign.steeringwheel")

    /// 􁸗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalAccelerator = SFSymbol(rawValue: "pedal.accelerator")

    /// 􁸘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalAcceleratorFill = SFSymbol(rawValue: "pedal.accelerator.fill")

    /// 􁸙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalBrake = SFSymbol(rawValue: "pedal.brake")

    /// 􁸚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalBrakeFill = SFSymbol(rawValue: "pedal.brake.fill")

    /// 􁸛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalClutch = SFSymbol(rawValue: "pedal.clutch")

    /// 􁸜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pedalClutchFill = SFSymbol(rawValue: "pedal.clutch.fill")

    /// 􁕍
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pencilAndListClipboard = SymbolWith1Localization<Rtl>(rawValue: "pencil.and.list.clipboard")

    /// 􀤒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pencilAndScribble = SFSymbol(rawValue: "pencil.and.scribble")

    /// 􁿵
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Markup feature.
    static let pencilTipCropCircleBadgeArrowForwardFill = SFSymbol(rawValue: "pencil.tip.crop.circle.badge.arrow.forward.fill")

    /// 􁿳
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Markup feature.
    static let pencilTipCropCircleBadgeMinusFill = SFSymbol(rawValue: "pencil.tip.crop.circle.badge.minus.fill")

    /// 􁾝
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Markup feature.
    static let pencilTipCropCircleBadgePlusFill = SFSymbol(rawValue: "pencil.tip.crop.circle.badge.plus.fill")

    /// 􁾛
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Markup feature.
    static let pencilTipCropCircleFill = SFSymbol(rawValue: "pencil.tip.crop.circle.fill")

    /// 􁷩
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to sharing or using a shared password or passkey.
    static let person2BadgeKey = SFSymbol(rawValue: "person.2.badge.key")

    /// 􁷫
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to sharing or using a shared password or passkey.
    static let person2BadgeKeyFill = SFSymbol(rawValue: "person.2.badge.key.fill")

    /// 􁠃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personAndBackgroundStripedHorizontal = SFSymbol(rawValue: "person.and.background.striped.horizontal")

    /// 􂄽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personBubble = SFSymbol(rawValue: "person.bubble")

    /// 􂄾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personBubbleFill = SFSymbol(rawValue: "person.bubble.fill")

    /// 􁽓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personBustCircle = SFSymbol(rawValue: "person.bust.circle")

    /// 􁽔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personBustCircleFill = SFSymbol(rawValue: "person.bust.circle.fill")

    /// 􂅪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personCropCircleDashedCircle = SFSymbol(rawValue: "person.crop.circle.dashed.circle")

    /// 􂃿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personCropCircleDashedCircleFill = SFSymbol(rawValue: "person.crop.circle.dashed.circle.fill")

    /// 􁣔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personSlash = SFSymbol(rawValue: "person.slash")

    /// 􁣕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personSlashFill = SFSymbol(rawValue: "person.slash.fill")

    /// 􂈞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pesetasignArrowCirclepath = SFSymbol(rawValue: "pesetasign.arrow.circlepath")

    /// 􂈟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pesosignArrowCirclepath = SFSymbol(rawValue: "pesosign.arrow.circlepath")

    /// 􀼃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneBadgeWaveform = SFSymbol(rawValue: "phone.badge.waveform")

    /// 􀼄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneBadgeWaveformFill = SFSymbol(rawValue: "phone.badge.waveform.fill")

    /// 􀱮
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneBubble = SymbolWith1Localization<Rtl>(rawValue: "phone.bubble")

    /// 􀱯
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneBubbleFill = SymbolWith1Localization<Rtl>(rawValue: "phone.bubble.fill")

    /// 􁼧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let photoArtframeCircle = SFSymbol(rawValue: "photo.artframe.circle")

    /// 􁼨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoArtframeCircleFill = SFSymbol(rawValue: "photo.artframe.circle.fill")

    /// 􁃲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgeArrowDown = SFSymbol(rawValue: "photo.badge.arrow.down")

    /// 􁃳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgeArrowDownFill = SFSymbol(rawValue: "photo.badge.arrow.down.fill")

    /// 􁘹
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgeCheckmark = SFSymbol(rawValue: "photo.badge.checkmark")

    /// 􁘺
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgeCheckmarkFill = SFSymbol(rawValue: "photo.badge.checkmark.fill")

    /// 􁃏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgePlus = SFSymbol(rawValue: "photo.badge.plus")

    /// 􁃐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let photoBadgePlusFill = SFSymbol(rawValue: "photo.badge.plus.fill")

    /// 􁹙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let playHouse = SFSymbol(rawValue: "play.house")

    /// 􁹚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let playHouseFill = SFSymbol(rawValue: "play.house.fill")

    /// 􁻶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftFilledForwardToPointToprightScurvepath = SFSymbol(rawValue: "point.bottomleft.filled.forward.to.point.topright.scurvepath")

    /// 􁻷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftForwardToArrowtriangleUturnScurvepath = SFSymbol(rawValue: "point.bottomleft.forward.to.arrowtriangle.uturn.scurvepath")

    /// 􁸹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftForwardToArrowtriangleUturnScurvepathFill = SFSymbol(rawValue: "point.bottomleft.forward.to.arrowtriangle.uturn.scurvepath.fill")

    /// 􁻵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftForwardToPointToprightFilledScurvepath = SFSymbol(rawValue: "point.bottomleft.forward.to.point.topright.filled.scurvepath")

    /// 􁻴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftForwardToPointToprightScurvepath = SFSymbol(rawValue: "point.bottomleft.forward.to.point.topright.scurvepath")

    /// 􁸸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointBottomleftForwardToPointToprightScurvepathFill = SFSymbol(rawValue: "point.bottomleft.forward.to.point.topright.scurvepath.fill")

    /// 􁻸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointForwardToPointCapsulepath = SFSymbol(rawValue: "point.forward.to.point.capsulepath")

    /// 􁸺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pointForwardToPointCapsulepathFill = SFSymbol(rawValue: "point.forward.to.point.capsulepath.fill")

    /// 􀣱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pointTopleftDownToPointBottomrightCurvepath = SFSymbol(rawValue: "point.topleft.down.to.point.bottomright.curvepath")

    /// 􀬱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pointTopleftDownToPointBottomrightCurvepathFill = SFSymbol(rawValue: "point.topleft.down.to.point.bottomright.curvepath.fill")

    /// 􀾔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pointTopleftDownToPointBottomrightFilledCurvepath = SFSymbol(rawValue: "point.topleft.down.to.point.bottomright.filled.curvepath")

    /// 􀾕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pointTopleftFilledDownToPointBottomrightCurvepath = SFSymbol(rawValue: "point.topleft.filled.down.to.point.bottomright.curvepath")

    /// 􁤯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let polishzlotysign = SFSymbol(rawValue: "polishzlotysign")

    /// 􂈴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let polishzlotysignArrowCirclepath = SFSymbol(rawValue: "polishzlotysign.arrow.circlepath")

    /// 􁤰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let polishzlotysignCircle = SFSymbol(rawValue: "polishzlotysign.circle")

    /// 􁤱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let polishzlotysignCircleFill = SFSymbol(rawValue: "polishzlotysign.circle.fill")

    /// 􁤲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let polishzlotysignSquare = SFSymbol(rawValue: "polishzlotysign.square")

    /// 􁤳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let polishzlotysignSquareFill = SFSymbol(rawValue: "polishzlotysign.square.fill")

    /// 􁣷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let powercord = SFSymbol(rawValue: "powercord")

    /// 􁣸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let powercordFill = SFSymbol(rawValue: "powercord.fill")

    /// 􀨍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rButtonRoundedbottomHorizontal = SFSymbol(rawValue: "r.button.roundedbottom.horizontal")

    /// 􀨎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "r.button.roundedbottom.horizontal.fill")

    /// 􀨏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r1ButtonRoundedbottomHorizontal = SFSymbol(rawValue: "r1.button.roundedbottom.horizontal")

    /// 􀨐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r1ButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "r1.button.roundedbottom.horizontal.fill")

    /// 􁺉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r1Circle = SFSymbol(rawValue: "r1.circle")

    /// 􁺊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r1CircleFill = SFSymbol(rawValue: "r1.circle.fill")

    /// 􁷵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r2ButtonAngledtopVerticalRight = SFSymbol(rawValue: "r2.button.angledtop.vertical.right")

    /// 􁷶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r2ButtonAngledtopVerticalRightFill = SFSymbol(rawValue: "r2.button.angledtop.vertical.right.fill")

    /// 􀨑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r2ButtonRoundedtopHorizontal = SFSymbol(rawValue: "r2.button.roundedtop.horizontal")

    /// 􀨒
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r2ButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "r2.button.roundedtop.horizontal.fill")

    /// 􁺍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r2Circle = SFSymbol(rawValue: "r2.circle")

    /// 􁺎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r2CircleFill = SFSymbol(rawValue: "r2.circle.fill")

    /// 􁸉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r3ButtonAngledbottomHorizontalRight = SFSymbol(rawValue: "r3.button.angledbottom.horizontal.right")

    /// 􁸊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r3ButtonAngledbottomHorizontalRightFill = SFSymbol(rawValue: "r3.button.angledbottom.horizontal.right.fill")

    /// 􁺤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let r4ButtonHorizontal = SFSymbol(rawValue: "r4.button.horizontal")

    /// 􁺥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let r4ButtonHorizontalFill = SFSymbol(rawValue: "r4.button.horizontal.fill")

    /// 􀼭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let rainbow = SFSymbol(rawValue: "rainbow")

    /// 􀨕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rbButtonRoundedbottomHorizontal = SFSymbol(rawValue: "rb.button.roundedbottom.horizontal")

    /// 􀨖
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rbButtonRoundedbottomHorizontalFill = SFSymbol(rawValue: "rb.button.roundedbottom.horizontal.fill")

    /// 􁺋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rbCircle = SFSymbol(rawValue: "rb.circle")

    /// 􁺌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rbCircleFill = SFSymbol(rawValue: "rb.circle.fill")

    /// 􀬄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangle3GroupBubble = SFSymbol(rawValue: "rectangle.3.group.bubble")

    /// 􀬅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rectangle3GroupBubbleFill = SFSymbol(rawValue: "rectangle.3.group.bubble.fill")

    /// 􀪫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleCheckered = SFSymbol(rawValue: "rectangle.checkered")

    /// 􂇕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangleInsetFilledAndCursorarrow = SFSymbol(rawValue: "rectangle.inset.filled.and.cursorarrow")

    /// 􂃕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangleInsetFilledBadgeRecord = SFSymbol(rawValue: "rectangle.inset.filled.badge.record")

    /// 􁻯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangleLandscapeRotate = SFSymbol(rawValue: "rectangle.landscape.rotate")

    /// 􂇓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangleOnRectangleBadgeGearshape = SFSymbol(rawValue: "rectangle.on.rectangle.badge.gearshape")

    /// 􁷷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectangleOnRectangleButtonAngledtopVerticalLeft = SFSymbol(rawValue: "rectangle.on.rectangle.button.angledtop.vertical.left")

    /// 􁷸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rectangleOnRectangleButtonAngledtopVerticalLeftFill = SFSymbol(rawValue: "rectangle.on.rectangle.button.angledtop.vertical.left.fill")

    /// 􁥋
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rectanglePortraitBadgePlus = SFSymbol(rawValue: "rectangle.portrait.badge.plus")

    /// 􁥌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rectanglePortraitBadgePlusFill = SFSymbol(rawValue: "rectangle.portrait.badge.plus.fill")

    /// 􁻮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectanglePortraitRotate = SFSymbol(rawValue: "rectangle.portrait.rotate")

    /// 􁽾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio16To9 = SFSymbol(rawValue: "rectangle.ratio.16.to.9")

    /// 􁽿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio16To9Fill = SFSymbol(rawValue: "rectangle.ratio.16.to.9.fill")

    /// 􁽸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio3To4 = SFSymbol(rawValue: "rectangle.ratio.3.to.4")

    /// 􁽹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio3To4Fill = SFSymbol(rawValue: "rectangle.ratio.3.to.4.fill")

    /// 􁽺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio4To3 = SFSymbol(rawValue: "rectangle.ratio.4.to.3")

    /// 􁽻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio4To3Fill = SFSymbol(rawValue: "rectangle.ratio.4.to.3.fill")

    /// 􁽼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio9To16 = SFSymbol(rawValue: "rectangle.ratio.9.to.16")

    /// 􁽽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectangleRatio9To16Fill = SFSymbol(rawValue: "rectangle.ratio.9.to.16.fill")

    /// 􁟈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let retarderBrakesignalAndExclamationmark = SFSymbol(rawValue: "retarder.brakesignal.and.exclamationmark")

    /// 􁟋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let retarderBrakesignalSlash = SFSymbol(rawValue: "retarder.brakesignal.slash")

    /// 􁣦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let right = SFSymbol(rawValue: "right")

    /// 􁣧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rightCircle = SFSymbol(rawValue: "right.circle")

    /// 􁣨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rightCircleFill = SFSymbol(rawValue: "right.circle.fill")

    /// 􁹫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let righttriangle = SFSymbol(rawValue: "righttriangle")

    /// 􁹬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let righttriangleFill = SFSymbol(rawValue: "righttriangle.fill")

    /// 􀍸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let righttriangleSplitDiagonal = SFSymbol(rawValue: "righttriangle.split.diagonal")

    /// 􀍹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let righttriangleSplitDiagonalFill = SFSymbol(rawValue: "righttriangle.split.diagonal.fill")

    /// 􁺦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rmButtonHorizontal = SFSymbol(rawValue: "rm.button.horizontal")

    /// 􁺧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rmButtonHorizontalFill = SFSymbol(rawValue: "rm.button.horizontal.fill")

    /// 􁱀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rotate3dCircle = SFSymbol(rawValue: "rotate.3d.circle")

    /// 􁱁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rotate3dCircleFill = SFSymbol(rawValue: "rotate.3d.circle.fill")

    /// 􁱂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rotate3dFill = SFSymbol(rawValue: "rotate.3d.fill")

    /// 􁸍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rsbButtonAngledbottomHorizontalRight = SFSymbol(rawValue: "rsb.button.angledbottom.horizontal.right")

    /// 􁸎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rsbButtonAngledbottomHorizontalRightFill = SFSymbol(rawValue: "rsb.button.angledbottom.horizontal.right.fill")

    /// 􀨙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rtButtonRoundedtopHorizontal = SFSymbol(rawValue: "rt.button.roundedtop.horizontal")

    /// 􀨚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rtButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "rt.button.roundedtop.horizontal.fill")

    /// 􁺏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rtCircle = SFSymbol(rawValue: "rt.circle")

    /// 􁺐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rtCircleFill = SFSymbol(rawValue: "rt.circle.fill")

    /// 􂈙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rublesignArrowCirclepath = SFSymbol(rawValue: "rublesign.arrow.circlepath")

    /// 􂈮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rupeesignArrowCirclepath = SFSymbol(rawValue: "rupeesign.arrow.circlepath")

    /// 􂇄
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shared With You feature.
    static let sharedWithYouCircle = SFSymbol(rawValue: "shared.with.you.circle")

    /// 􂄀
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shared With You feature.
    static let sharedWithYouCircleFill = SFSymbol(rawValue: "shared.with.you.circle.fill")

    /// 􂈬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let shekelsignArrowCirclepath = SFSymbol(rawValue: "shekelsign.arrow.circlepath")

    /// 􀵔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shieldCheckered = SFSymbol(rawValue: "shield.checkered")

    /// 􁷥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let shieldLefthalfFilledBadgeCheckmark = SFSymbol(rawValue: "shield.lefthalf.filled.badge.checkmark")

    /// 􁷧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let shieldLefthalfFilledTrianglebadgeExclamationmark = SFSymbol(rawValue: "shield.lefthalf.filled.trianglebadge.exclamationmark")

    /// 􁣯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shoe = SFSymbol(rawValue: "shoe")

    /// 􁣱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shoe2 = SFSymbol(rawValue: "shoe.2")

    /// 􁣲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shoe2Fill = SFSymbol(rawValue: "shoe.2.fill")

    /// 􁤄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let shoeCircle = SFSymbol(rawValue: "shoe.circle")

    /// 􁤅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let shoeCircleFill = SFSymbol(rawValue: "shoe.circle.fill")

    /// 􁣰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shoeFill = SFSymbol(rawValue: "shoe.fill")

    /// 􂂩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let skateboard = SFSymbol(rawValue: "skateboard")

    /// 􂂪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let skateboardFill = SFSymbol(rawValue: "skateboard.fill")

    /// 􂂫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let skis = SFSymbol(rawValue: "skis")

    /// 􂂬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let skisFill = SFSymbol(rawValue: "skis.fill")

    /// 􁵤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sliderHorizontal2Square = SFSymbol(rawValue: "slider.horizontal.2.square")

    /// 􁿌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sliderHorizontalBelowSunMax = SFSymbol(rawValue: "slider.horizontal.below.sun.max")

    /// 􁤫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let smartphone = SFSymbol(rawValue: "smartphone")

    /// 􂂭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let snowboard = SFSymbol(rawValue: "snowboard")

    /// 􂂮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let snowboardFill = SFSymbol(rawValue: "snowboard.fill")

    /// 􁗮
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let speakerWave2Bubble = SymbolWith1Localization<Rtl>(rawValue: "speaker.wave.2.bubble")

    /// 􁗯
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let speakerWave2BubbleFill = SymbolWith1Localization<Rtl>(rawValue: "speaker.wave.2.bubble.fill")

    /// 􁸼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let square2Layers3dFill = SFSymbol(rawValue: "square.2.layers.3d.fill")

    /// 􀠹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareArrowtriangle4Outward = SFSymbol(rawValue: "square.arrowtriangle.4.outward")

    /// 􁥉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareBadgePlus = SFSymbol(rawValue: "square.badge.plus")

    /// 􁥊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareBadgePlusFill = SFSymbol(rawValue: "square.badge.plus.fill")

    /// 􂁟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareResize = SFSymbol(rawValue: "square.resize")

    /// 􁺠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareResizeDown = SFSymbol(rawValue: "square.resize.down")

    /// 􁺟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareResizeUp = SFSymbol(rawValue: "square.resize.up")

    /// 􀙐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareStack3dUpBadgeAutomatic = SFSymbol(rawValue: "square.stack.3d.up.badge.automatic")

    /// 􀙑
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareStack3dUpBadgeAutomaticFill = SFSymbol(rawValue: "square.stack.3d.up.badge.automatic.fill")

    /// 􂅡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareStack3dUpTrianglebadgeExclamationmark = SFSymbol(rawValue: "square.stack.3d.up.trianglebadge.exclamationmark")

    /// 􂅢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareStack3dUpTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "square.stack.3d.up.trianglebadge.exclamationmark.fill")

    /// 􂆅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let squaresLeadingRectangleFill = SFSymbol(rawValue: "squares.leading.rectangle.fill")

    /// 􀩢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareshapeDottedSquareshape = SFSymbol(rawValue: "squareshape.dotted.squareshape")

    /// 􀫴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareshapeSquareshapeDotted = SFSymbol(rawValue: "squareshape.squareshape.dotted")

    /// 􁣖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let staroflifeShield = SFSymbol(rawValue: "staroflife.shield")

    /// 􁣗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let staroflifeShieldFill = SFSymbol(rawValue: "staroflife.shield.fill")

    /// 􁢟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let steeringwheelAndLiquidWave = SFSymbol(rawValue: "steeringwheel.and.liquid.wave")

    /// 􁖰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let steeringwheelArrowtriangleLeft = SFSymbol(rawValue: "steeringwheel.arrowtriangle.left")

    /// 􁖱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let steeringwheelArrowtriangleRight = SFSymbol(rawValue: "steeringwheel.arrowtriangle.right")

    /// 􁉛
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let steeringwheelBadgeExclamationmark = SFSymbol(rawValue: "steeringwheel.badge.exclamationmark")

    /// 􁿢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let steeringwheelCircle = SFSymbol(rawValue: "steeringwheel.circle")

    /// 􁿣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let steeringwheelCircleFill = SFSymbol(rawValue: "steeringwheel.circle.fill")

    /// 􂈕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sterlingsignArrowCirclepath = SFSymbol(rawValue: "sterlingsign.arrow.circlepath")

    /// 􁽇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let storefront = SFSymbol(rawValue: "storefront")

    /// 􁽉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let storefrontCircle = SFSymbol(rawValue: "storefront.circle")

    /// 􁽊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let storefrontCircleFill = SFSymbol(rawValue: "storefront.circle.fill")

    /// 􁽈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let storefrontFill = SFSymbol(rawValue: "storefront.fill")

    /// 􀻞
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunHorizon = SFSymbol(rawValue: "sun.horizon")

    /// 􁛅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunHorizonCircle = SFSymbol(rawValue: "sun.horizon.circle")

    /// 􁛆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunHorizonCircleFill = SFSymbol(rawValue: "sun.horizon.circle.fill")

    /// 􀻟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunHorizonFill = SFSymbol(rawValue: "sun.horizon.fill")

    /// 􁷌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunRain = SFSymbol(rawValue: "sun.rain")

    /// 􁷎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunRainCircle = SFSymbol(rawValue: "sun.rain.circle")

    /// 􁷏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunRainCircleFill = SFSymbol(rawValue: "sun.rain.circle.fill")

    /// 􁷍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunRainFill = SFSymbol(rawValue: "sun.rain.fill")

    /// 􁷐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunSnow = SFSymbol(rawValue: "sun.snow")

    /// 􁷒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunSnowCircle = SFSymbol(rawValue: "sun.snow.circle")

    /// 􁷓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunSnowCircleFill = SFSymbol(rawValue: "sun.snow.circle.fill")

    /// 􁷑
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunSnowFill = SFSymbol(rawValue: "sun.snow.fill")

    /// 􁻈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunglasses = SFSymbol(rawValue: "sunglasses")

    /// 􁻉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sunglassesFill = SFSymbol(rawValue: "sunglasses.fill")

    /// 􂂯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let surfboard = SFSymbol(rawValue: "surfboard")

    /// 􂂰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let surfboardFill = SFSymbol(rawValue: "surfboard.fill")

    /// 􁥐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideHillDown = SFSymbol(rawValue: "suv.side.hill.down")

    /// 􁥑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideHillDownFill = SFSymbol(rawValue: "suv.side.hill.down.fill")

    /// 􁤏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideHillUp = SFSymbol(rawValue: "suv.side.hill.up")

    /// 􁤐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideHillUpFill = SFSymbol(rawValue: "suv.side.hill.up.fill")

    /// 􁤀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideLock = SFSymbol(rawValue: "suv.side.lock")

    /// 􁤁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideLockFill = SFSymbol(rawValue: "suv.side.lock.fill")

    /// 􁤂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideLockOpen = SFSymbol(rawValue: "suv.side.lock.open")

    /// 􁤃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let suvSideLockOpenFill = SFSymbol(rawValue: "suv.side.lock.open.fill")

    /// 􁤭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let swedishkronasign = SFSymbol(rawValue: "swedishkronasign")

    /// 􂈶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let swedishkronasignArrowCirclepath = SFSymbol(rawValue: "swedishkronasign.arrow.circlepath")

    /// 􀮨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let swedishkronasignCircle = SFSymbol(rawValue: "swedishkronasign.circle")

    /// 􀮩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let swedishkronasignCircleFill = SFSymbol(rawValue: "swedishkronasign.circle.fill")

    /// 􀮪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let swedishkronasignSquare = SFSymbol(rawValue: "swedishkronasign.square")

    /// 􀮫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let swedishkronasignSquareFill = SFSymbol(rawValue: "swedishkronasign.square.fill")

    /// 􁗫
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s SwiftData.
    static let swiftdata = SFSymbol(rawValue: "swiftdata")

    /// 􁹢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let swirlCircleRighthalfFilled = SFSymbol(rawValue: "swirl.circle.righthalf.filled")

    /// 􁹪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let swirlCircleRighthalfFilledInverse = SFSymbol(rawValue: "swirl.circle.righthalf.filled.inverse")

    /// 􂈝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tengesignArrowCirclepath = SFSymbol(rawValue: "tengesign.arrow.circlepath")

    /// 􁷉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerVariableAndFigure = SFSymbol(rawValue: "thermometer.variable.and.figure")

    /// 􁷊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let thermometerVariableAndFigureCircle = SFSymbol(rawValue: "thermometer.variable.and.figure.circle")

    /// 􁷋
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerVariableAndFigureCircleFill = SFSymbol(rawValue: "thermometer.variable.and.figure.circle.fill")

    /// 􁢶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tirepressure = SFSymbol(rawValue: "tirepressure")

    /// 􂀼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tortoiseCircle = SFSymbol(rawValue: "tortoise.circle")

    /// 􂀽
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tortoiseCircleFill = SFSymbol(rawValue: "tortoise.circle.fill")

    /// 􁢳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tractionControlTirepressure = SFSymbol(rawValue: "traction.control.tirepressure")

    /// 􁢵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tractionControlTirepressureExclamationmark = SFSymbol(rawValue: "traction.control.tirepressure.exclamationmark")

    /// 􁢴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tractionControlTirepressureSlash = SFSymbol(rawValue: "traction.control.tirepressure.slash")

    /// 􀥰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let triangleshape = SFSymbol(rawValue: "triangleshape")

    /// 􀥱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let triangleshapeFill = SFSymbol(rawValue: "triangleshape.fill")

    /// 􁁾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let truckBox = SFSymbol(rawValue: "truck.box")

    /// 􁂀
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let truckBoxBadgeClock = SymbolWith1Localization<Rtl>(rawValue: "truck.box.badge.clock")

    /// 􁂁
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let truckBoxBadgeClockFill = SymbolWith1Localization<Rtl>(rawValue: "truck.box.badge.clock.fill")

    /// 􁁿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let truckBoxFill = SFSymbol(rawValue: "truck.box.fill")

    /// 􁥩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let truckPickupSide = SFSymbol(rawValue: "truck.pickup.side")

    /// 􁥭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideAirCirculate = SFSymbol(rawValue: "truck.pickup.side.air.circulate")

    /// 􁥮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideAirCirculateFill = SFSymbol(rawValue: "truck.pickup.side.air.circulate.fill")

    /// 􁥯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideAirFresh = SFSymbol(rawValue: "truck.pickup.side.air.fresh")

    /// 􁥰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideAirFreshFill = SFSymbol(rawValue: "truck.pickup.side.air.fresh.fill")

    /// 􁥱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let truckPickupSideAndExclamationmark = SFSymbol(rawValue: "truck.pickup.side.and.exclamationmark")

    /// 􁥲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let truckPickupSideAndExclamationmarkFill = SFSymbol(rawValue: "truck.pickup.side.and.exclamationmark.fill")

    /// 􁥷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleDown = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.down")

    /// 􁥸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleDownFill = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.down.fill")

    /// 􁥵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleUp = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.up")

    /// 􁥳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleUpArrowtriangleDown = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.up.arrowtriangle.down")

    /// 􁥴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleUpArrowtriangleDownFill = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.up.arrowtriangle.down.fill")

    /// 􁥶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideArrowtriangleUpFill = SFSymbol(rawValue: "truck.pickup.side.arrowtriangle.up.fill")

    /// 􁥪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let truckPickupSideFill = SFSymbol(rawValue: "truck.pickup.side.fill")

    /// 􁥫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let truckPickupSideFrontOpen = SFSymbol(rawValue: "truck.pickup.side.front.open")

    /// 􁥬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let truckPickupSideFrontOpenFill = SFSymbol(rawValue: "truck.pickup.side.front.open.fill")

    /// 􁦆
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideHillDown = SFSymbol(rawValue: "truck.pickup.side.hill.down")

    /// 􁦇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideHillDownFill = SFSymbol(rawValue: "truck.pickup.side.hill.down.fill")

    /// 􁠗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideHillUp = SFSymbol(rawValue: "truck.pickup.side.hill.up")

    /// 􁠘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideHillUpFill = SFSymbol(rawValue: "truck.pickup.side.hill.up.fill")

    /// 􁥹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideLock = SFSymbol(rawValue: "truck.pickup.side.lock")

    /// 􁥺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideLockFill = SFSymbol(rawValue: "truck.pickup.side.lock.fill")

    /// 􁥻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideLockOpen = SFSymbol(rawValue: "truck.pickup.side.lock.open")

    /// 􁥼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let truckPickupSideLockOpenFill = SFSymbol(rawValue: "truck.pickup.side.lock.open.fill")

    /// 􁽬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tshirtCircle = SFSymbol(rawValue: "tshirt.circle")

    /// 􁽭
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tshirtCircleFill = SFSymbol(rawValue: "tshirt.circle.fill")

    /// 􂈪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tugriksignArrowCirclepath = SFSymbol(rawValue: "tugriksign.arrow.circlepath")

    /// 􂈘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let turkishlirasignArrowCirclepath = SFSymbol(rawValue: "turkishlirasign.arrow.circlepath")

    /// 􂆁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tvBadgeWifi = SFSymbol(rawValue: "tv.badge.wifi")

    /// 􂆂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tvBadgeWifiFill = SFSymbol(rawValue: "tv.badge.wifi.fill")

    /// 􁋞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tvSlash = SFSymbol(rawValue: "tv.slash")

    /// 􁣘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tvSlashFill = SFSymbol(rawValue: "tv.slash.fill")

    /// 􀼅
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoBadgeWaveform = SFSymbol(rawValue: "video.badge.waveform")

    /// 􀼆
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoBadgeWaveformFill = SFSymbol(rawValue: "video.badge.waveform.fill")

    /// 􀱰
    /// 2 Localizations, 2 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoBubble = SymbolWith1Localization<Rtl>(rawValue: "video.bubble")

    /// 􀱱
    /// 2 Localizations, 3 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoBubbleFill = SymbolWith1Localization<Rtl>(rawValue: "video.bubble.fill")

    /// 􁾄
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoSlashCircle = SFSymbol(rawValue: "video.slash.circle")

    /// 􁾅
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoSlashCircleFill = SFSymbol(rawValue: "video.slash.circle.fill")

    /// 􁹿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let viewfinderRectangular = SFSymbol(rawValue: "viewfinder.rectangular")

    /// 􁣓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let viewfinderTrianglebadgeExclamationmark = SFSymbol(rawValue: "viewfinder.trianglebadge.exclamationmark")

    /// 􁎖
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionpro = SFSymbol(rawValue: "visionpro")

    /// 􁳔
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproAndArrowForward = SFSymbol(rawValue: "visionpro.and.arrow.forward")

    /// 􁳕
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproAndArrowForwardFill = SFSymbol(rawValue: "visionpro.and.arrow.forward.fill")

    /// 􁷇
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproBadgeExclamationmark = SFSymbol(rawValue: "visionpro.badge.exclamationmark")

    /// 􁷈
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproBadgeExclamationmarkFill = SFSymbol(rawValue: "visionpro.badge.exclamationmark.fill")

    /// 􁼿
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproBadgePlay = SFSymbol(rawValue: "visionpro.badge.play")

    /// 􁽀
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproBadgePlayFill = SFSymbol(rawValue: "visionpro.badge.play.fill")

    /// 􂅿
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproCircle = SFSymbol(rawValue: "visionpro.circle")

    /// 􂆀
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproCircleFill = SFSymbol(rawValue: "visionpro.circle.fill")

    /// 􁎘
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproFill = SFSymbol(rawValue: "visionpro.fill")

    /// 􁽃
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproSlash = SFSymbol(rawValue: "visionpro.slash")

    /// 􂆞
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproSlashCircle = SFSymbol(rawValue: "visionpro.slash.circle")

    /// 􂆟
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproSlashCircleFill = SFSymbol(rawValue: "visionpro.slash.circle.fill")

    /// 􁽄
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple Vision Pro.
    static let visionproSlashFill = SFSymbol(rawValue: "visionpro.slash.fill")

    /// 􀭻
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Accessibility features.
    static let voiceover = SFSymbol(rawValue: "voiceover")

    /// 􁀬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let warninglight = SFSymbol(rawValue: "warninglight")

    /// 􁀭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let warninglightFill = SFSymbol(rawValue: "warninglight.fill")

    /// 􁿎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let washerCircle = SFSymbol(rawValue: "washer.circle")

    /// 􁿏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let washerCircleFill = SFSymbol(rawValue: "washer.circle.fill")

    /// 􁞺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let watchAnalog = SFSymbol(rawValue: "watch.analog")

    /// 􁻊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let waterbottle = SFSymbol(rawValue: "waterbottle")

    /// 􁻋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let waterbottleFill = SFSymbol(rawValue: "waterbottle.fill")

    /// 􂃓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let waveformAndPersonFilled = SFSymbol(rawValue: "waveform.and.person.filled")

    /// 􀻾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waveformBadgeMagnifyingglass = SFSymbol(rawValue: "waveform.badge.magnifyingglass")

    /// 􁃨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waveformBadgeMic = SFSymbol(rawValue: "waveform.badge.mic")

    /// 􂄁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let wifiExclamationmarkCircle = SFSymbol(rawValue: "wifi.exclamationmark.circle")

    /// 􂄂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let wifiExclamationmarkCircleFill = SFSymbol(rawValue: "wifi.exclamationmark.circle.fill")

    /// 􂈡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let wonsignArrowCirclepath = SFSymbol(rawValue: "wonsign.arrow.circlepath")

    /// 􁻇
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Xserve RAID.
    static let xserveRaid = SFSymbol(rawValue: "xserve.raid")

    /// 􂈔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let yensignArrowCirclepath = SFSymbol(rawValue: "yensign.arrow.circlepath")

    /// 􁕤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let yieldsign = SFSymbol(rawValue: "yieldsign")

    /// 􁕥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let yieldsignFill = SFSymbol(rawValue: "yieldsign.fill")

    /// 􀨛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let zlButtonRoundedtopHorizontal = SFSymbol(rawValue: "zl.button.roundedtop.horizontal")

    /// 􀨜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let zlButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "zl.button.roundedtop.horizontal.fill")

    /// 􀨝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let zrButtonRoundedtopHorizontal = SFSymbol(rawValue: "zr.button.roundedtop.horizontal")

    /// 􀨞
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let zrButtonRoundedtopHorizontalFill = SFSymbol(rawValue: "zr.button.roundedtop.horizontal.fill")
}
