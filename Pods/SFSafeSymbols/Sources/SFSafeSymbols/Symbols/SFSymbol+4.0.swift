// Don't touch this manually, this code is generated by the SymbolsGenerator helper tool

// 4.0 Symbols
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public extension SFSymbol {
    /// 􁀴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let absBrakesignal = SFSymbol(rawValue: "abs.brakesignal")

    /// 􁓭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airConditionerHorizontal = SFSymbol(rawValue: "air.conditioner.horizontal")

    /// 􁓮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airConditionerHorizontalFill = SFSymbol(rawValue: "air.conditioner.horizontal.fill")

    /// 􁓫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airConditionerVertical = SFSymbol(rawValue: "air.conditioner.vertical")

    /// 􁓬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airConditionerVerticalFill = SFSymbol(rawValue: "air.conditioner.vertical.fill")

    /// 􁓥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airPurifier = SFSymbol(rawValue: "air.purifier")

    /// 􁓦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let airPurifierFill = SFSymbol(rawValue: "air.purifier.fill")

    /// 􁗀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let alarmWavesLeftAndRight = SFSymbol(rawValue: "alarm.waves.left.and.right")

    /// 􁗁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let alarmWavesLeftAndRightFill = SFSymbol(rawValue: "alarm.waves.left.and.right.fill")

    /// 􁒆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let allergensFill = SFSymbol(rawValue: "allergens.fill")

    /// 􁑡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let angle = SFSymbol(rawValue: "angle")

    /// 􀣺
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Sign in with Apple.
    static let appleLogo = SFSymbol(rawValue: "apple.logo")

    /// 􀚍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowDownAndLineHorizontalAndArrowUp = SFSymbol(rawValue: "arrow.down.and.line.horizontal.and.arrow.up")

    /// 􁒞
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let arrowDownMessage = SFSymbol(rawValue: "arrow.down.message")

    /// 􁒟
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let arrowDownMessageFill = SFSymbol(rawValue: "arrow.down.message.fill")

    /// 􀚋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowLeftAndLineVerticalAndArrowRight = SFSymbol(rawValue: "arrow.left.and.line.vertical.and.arrow.right")

    /// 􁖭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowLeftAndRightTextVertical = SFSymbol(rawValue: "arrow.left.and.right.text.vertical")

    /// 􀚌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowRightAndLineVerticalAndArrowLeft = SFSymbol(rawValue: "arrow.right.and.line.vertical.and.arrow.left")

    /// 􁒏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowUpAndDownAndSparkles = SFSymbol(rawValue: "arrow.up.and.down.and.sparkles")

    /// 􀵬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let arrowUpAndDownTextHorizontal = SFSymbol(rawValue: "arrow.up.and.down.text.horizontal")

    /// 􀚎
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowUpAndLineHorizontalAndArrowDown = SFSymbol(rawValue: "arrow.up.and.line.horizontal.and.arrow.down")

    /// 􁎳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowUpCircleBadgeClock = SFSymbol(rawValue: "arrow.up.circle.badge.clock")

    /// 􁉈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeBackward = SFSymbol(rawValue: "arrowshape.backward")

    /// 􁉉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeBackwardFill = SFSymbol(rawValue: "arrowshape.backward.fill")

    /// 􁉆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeForward = SFSymbol(rawValue: "arrowshape.forward")

    /// 􁉇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeForwardFill = SFSymbol(rawValue: "arrowshape.forward.fill")

    /// 􁉄
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeLeft = SFSymbol(rawValue: "arrowshape.left")

    /// 􁉅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeLeftFill = SFSymbol(rawValue: "arrowshape.left.fill")

    /// 􁉂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeRight = SFSymbol(rawValue: "arrowshape.right")

    /// 􁉃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let arrowshapeRightFill = SFSymbol(rawValue: "arrowshape.right.fill")

    /// 􁎱
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeTurnUpBackwardBadgeClock = SymbolWith1Localization<Rtl>(rawValue: "arrowshape.turn.up.backward.badge.clock")

    /// 􁖾
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let arrowshapeTurnUpBackwardBadgeClockFill = SymbolWith1Localization<Rtl>(rawValue: "arrowshape.turn.up.backward.badge.clock.fill")

    /// 􁑐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let australsign = SFSymbol(rawValue: "australsign")

    /// 􁓺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let avRemote = SFSymbol(rawValue: "av.remote")

    /// 􁓻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let avRemoteFill = SFSymbol(rawValue: "av.remote.fill")

    /// 􁋹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let backpack = SFSymbol(rawValue: "backpack")

    /// 􁋺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let backpackFill = SFSymbol(rawValue: "backpack.fill")

    /// 􁋮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let backwardEndCircle = SFSymbol(rawValue: "backward.end.circle")

    /// 􁋯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let backwardEndCircleFill = SFSymbol(rawValue: "backward.end.circle.fill")

    /// 􁚢
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bagBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "bag.badge.questionmark")

    /// 􁚣
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bagFillBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "bag.fill.badge.questionmark")

    /// 􁑜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bahtsign = SFSymbol(rawValue: "bahtsign")

    /// 􁔎
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let balloon = SFSymbol(rawValue: "balloon")

    /// 􁓷
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let balloon2 = SFSymbol(rawValue: "balloon.2")

    /// 􁓸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let balloon2Fill = SFSymbol(rawValue: "balloon.2.fill")

    /// 􁔏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let balloonFill = SFSymbol(rawValue: "balloon.fill")

    /// 􀡵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let baseball = SFSymbol(rawValue: "baseball")

    /// 􁚻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let baseballCircle = SFSymbol(rawValue: "baseball.circle")

    /// 􁚼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let baseballCircleFill = SFSymbol(rawValue: "baseball.circle.fill")

    /// 􁑠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let baseballDiamondBases = SFSymbol(rawValue: "baseball.diamond.bases")

    /// 􀡶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let baseballFill = SFSymbol(rawValue: "baseball.fill")

    /// 􁖊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let basket = SFSymbol(rawValue: "basket")

    /// 􁖋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let basketFill = SFSymbol(rawValue: "basket.fill")

    /// 􁗉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let basketball = SFSymbol(rawValue: "basketball")

    /// 􁚽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let basketballCircle = SFSymbol(rawValue: "basketball.circle")

    /// 􁚾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let basketballCircleFill = SFSymbol(rawValue: "basketball.circle.fill")

    /// 􁗊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let basketballFill = SFSymbol(rawValue: "basketball.fill")

    /// 􁐼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bathtub = SFSymbol(rawValue: "bathtub")

    /// 􁐽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bathtubFill = SFSymbol(rawValue: "bathtub.fill")

    /// 􁁔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100Circle = SFSymbol(rawValue: "battery.100.circle")

    /// 􁁕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let battery100CircleFill = SFSymbol(rawValue: "battery.100.circle.fill")

    /// 􁋸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let beachUmbrella = SFSymbol(rawValue: "beach.umbrella")

    /// 􁋻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let beachUmbrellaFill = SFSymbol(rawValue: "beach.umbrella.fill")

    /// 􁄤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bellAndWavesLeftAndRight = SFSymbol(rawValue: "bell.and.waves.left.and.right")

    /// 􁄠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let bellAndWavesLeftAndRightFill = SFSymbol(rawValue: "bell.and.waves.left.and.right.fill")

    /// 􁗟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bird = SFSymbol(rawValue: "bird")

    /// 􁗠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let birdFill = SFSymbol(rawValue: "bird.fill")

    /// 􁖩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let birthdayCake = SFSymbol(rawValue: "birthday.cake")

    /// 􁖪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let birthdayCakeFill = SFSymbol(rawValue: "birthday.cake.fill")

    /// 􁑞
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let bitcoinsign = SFSymbol(rawValue: "bitcoinsign")

    /// 􁑶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let blindsHorizontalClosed = SFSymbol(rawValue: "blinds.horizontal.closed")

    /// 􁑵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let blindsHorizontalOpen = SFSymbol(rawValue: "blinds.horizontal.open")

    /// 􁑴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let blindsVerticalClosed = SFSymbol(rawValue: "blinds.vertical.closed")

    /// 􁑳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let blindsVerticalOpen = SFSymbol(rawValue: "blinds.vertical.open")

    /// 􁐓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeClock = SFSymbol(rawValue: "bolt.badge.clock")

    /// 􁐔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boltBadgeClockFill = SFSymbol(rawValue: "bolt.badge.clock.fill")

    /// 􁊉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let boltBrakesignal = SFSymbol(rawValue: "bolt.brakesignal")

    /// 􁁾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let boxTruck = SFSymbol(rawValue: "box.truck")

    /// 􁂀
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boxTruckBadgeClock = SymbolWith1Localization<Rtl>(rawValue: "box.truck.badge.clock")

    /// 􁂁
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let boxTruckBadgeClockFill = SymbolWith1Localization<Rtl>(rawValue: "box.truck.badge.clock.fill")

    /// 􁁿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let boxTruckFill = SFSymbol(rawValue: "box.truck.fill")

    /// 􀾾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let brakesignal = SFSymbol(rawValue: "brakesignal")

    /// 􁀷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let brakesignalDashed = SFSymbol(rawValue: "brakesignal.dashed")

    /// 􁑟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let brazilianrealsign = SFSymbol(rawValue: "brazilianrealsign")

    /// 􁒉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bubblesAndSparkles = SFSymbol(rawValue: "bubbles.and.sparkles")

    /// 􁒊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let bubblesAndSparklesFill = SFSymbol(rawValue: "bubbles.and.sparkles.fill")

    /// 􁏰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonProgrammable = SFSymbol(rawValue: "button.programmable")

    /// 􁏤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let buttonProgrammableSquare = SFSymbol(rawValue: "button.programmable.square")

    /// 􁏥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let buttonProgrammableSquareFill = SFSymbol(rawValue: "button.programmable.square.fill")

    /// 􁐮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cabinet = SFSymbol(rawValue: "cabinet")

    /// 􁐯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cabinetFill = SFSymbol(rawValue: "cabinet.fill")

    /// 􁒸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carbonDioxideCloud = SFSymbol(rawValue: "carbon.dioxide.cloud")

    /// 􁒹
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carbonDioxideCloudFill = SFSymbol(rawValue: "carbon.dioxide.cloud.fill")

    /// 􁒶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let carbonMonoxideCloud = SFSymbol(rawValue: "carbon.monoxide.cloud")

    /// 􁒷
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let carbonMonoxideCloudFill = SFSymbol(rawValue: "carbon.monoxide.cloud.fill")

    /// 􁖎
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carrot = SFSymbol(rawValue: "carrot")

    /// 􁖏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let carrotFill = SFSymbol(rawValue: "carrot.fill")

    /// 􁚦
    /// 3 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Arabic
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cartBadgeQuestionmark = SymbolWith2Localizations<Ar, Rtl>(rawValue: "cart.badge.questionmark")

    /// 􁚧
    /// 3 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Arabic
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cartFillBadgeQuestionmark = SymbolWith2Localizations<Ar, Rtl>(rawValue: "cart.fill.badge.questionmark")

    /// 􁑕
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cedisign = SFSymbol(rawValue: "cedisign")

    /// 􀭧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cellularbars = SFSymbol(rawValue: "cellularbars")

    /// 􁑀
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let centsign = SFSymbol(rawValue: "centsign")

    /// 􁐶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chair = SFSymbol(rawValue: "chair")

    /// 􁐷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chairFill = SFSymbol(rawValue: "chair.fill")

    /// 􁐴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chairLounge = SFSymbol(rawValue: "chair.lounge")

    /// 􁐵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chairLoungeFill = SFSymbol(rawValue: "chair.lounge.fill")

    /// 􁌦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chandelier = SFSymbol(rawValue: "chandelier")

    /// 􁏓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chandelierFill = SFSymbol(rawValue: "chandelier.fill")

    /// 􁓖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let characterDuployan = SFSymbol(rawValue: "character.duployan")

    /// 􁓕
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let characterPhonetic = SFSymbol(rawValue: "character.phonetic")

    /// 􁓗
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let characterSutton = SFSymbol(rawValue: "character.sutton")

    /// 􁘳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chartLineDowntrendXyaxis = SFSymbol(rawValue: "chart.line.downtrend.xyaxis")

    /// 􁘴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chartLineDowntrendXyaxisCircle = SFSymbol(rawValue: "chart.line.downtrend.xyaxis.circle")

    /// 􁘵
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chartLineDowntrendXyaxisCircleFill = SFSymbol(rawValue: "chart.line.downtrend.xyaxis.circle.fill")

    /// 􁘶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chartLineFlattrendXyaxis = SFSymbol(rawValue: "chart.line.flattrend.xyaxis")

    /// 􁘷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let chartLineFlattrendXyaxisCircle = SFSymbol(rawValue: "chart.line.flattrend.xyaxis.circle")

    /// 􁘸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let chartLineFlattrendXyaxisCircleFill = SFSymbol(rawValue: "chart.line.flattrend.xyaxis.circle.fill")

    /// 􁙕
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let checklistChecked = SymbolWith1Localization<Rtl>(rawValue: "checklist.checked")

    /// 􁙠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let checklistUnchecked = SFSymbol(rawValue: "checklist.unchecked")

    /// 􁜞
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let checkmarkCircleBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "checkmark.circle.badge.questionmark")

    /// 􁜟
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let checkmarkCircleBadgeQuestionmarkFill = SymbolWith1Localization<Ar>(rawValue: "checkmark.circle.badge.questionmark.fill")

    /// 􁜢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let checkmarkCircleBadgeXmark = SFSymbol(rawValue: "checkmark.circle.badge.xmark")

    /// 􁜣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let checkmarkCircleBadgeXmarkFill = SFSymbol(rawValue: "checkmark.circle.badge.xmark.fill")

    /// 􁐕
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let checkmarkMessage = SFSymbol(rawValue: "checkmark.message")

    /// 􁐖
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let checkmarkMessageFill = SFSymbol(rawValue: "checkmark.message.fill")

    /// 􁍄
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chevronBackwardToLine = SFSymbol(rawValue: "chevron.backward.to.line")

    /// 􁍅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chevronForwardToLine = SFSymbol(rawValue: "chevron.forward.to.line")

    /// 􁍂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chevronLeftToLine = SFSymbol(rawValue: "chevron.left.to.line")

    /// 􁍃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let chevronRightToLine = SFSymbol(rawValue: "chevron.right.to.line")

    /// 􁙪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleDashedRectangle = SFSymbol(rawValue: "circle.dashed.rectangle")

    /// 􁙯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleFilledPatternDiagonallineRectangle = SFSymbol(rawValue: "circle.filled.pattern.diagonalline.rectangle")

    /// 􁙫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let circleRectangleDashed = SFSymbol(rawValue: "circle.rectangle.dashed")

    /// 􁙭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let circleRectangleFilledPatternDiagonalline = SFSymbol(rawValue: "circle.rectangle.filled.pattern.diagonalline")

    /// 􀟹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let clipboard = SFSymbol(rawValue: "clipboard")

    /// 􀟺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let clipboardFill = SFSymbol(rawValue: "clipboard.fill")

    /// 􁙜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadge = SFSymbol(rawValue: "clock.badge")

    /// 􁙝
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadgeFill = SFSymbol(rawValue: "clock.badge.fill")

    /// 􁜱
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "clock.badge.questionmark")

    /// 􁜲
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadgeQuestionmarkFill = SymbolWith1Localization<Ar>(rawValue: "clock.badge.questionmark.fill")

    /// 􁜒
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadgeXmark = SFSymbol(rawValue: "clock.badge.xmark")

    /// 􁜓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let clockBadgeXmarkFill = SFSymbol(rawValue: "clock.badge.xmark.fill")

    /// 􁛝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudBoltCircle = SFSymbol(rawValue: "cloud.bolt.circle")

    /// 􁛞
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudBoltCircleFill = SFSymbol(rawValue: "cloud.bolt.circle.fill")

    /// 􁛟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudBoltRainCircle = SFSymbol(rawValue: "cloud.bolt.rain.circle")

    /// 􁛠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudBoltRainCircleFill = SFSymbol(rawValue: "cloud.bolt.rain.circle.fill")

    /// 􁛍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudCircle = SFSymbol(rawValue: "cloud.circle")

    /// 􁛎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudCircleFill = SFSymbol(rawValue: "cloud.circle.fill")

    /// 􁛏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudDrizzleCircle = SFSymbol(rawValue: "cloud.drizzle.circle")

    /// 􁛐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudDrizzleCircleFill = SFSymbol(rawValue: "cloud.drizzle.circle.fill")

    /// 􁛕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudFogCircle = SFSymbol(rawValue: "cloud.fog.circle")

    /// 􁛖
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudFogCircleFill = SFSymbol(rawValue: "cloud.fog.circle.fill")

    /// 􁛗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudHailCircle = SFSymbol(rawValue: "cloud.hail.circle")

    /// 􁛘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudHailCircleFill = SFSymbol(rawValue: "cloud.hail.circle.fill")

    /// 􁛓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudHeavyrainCircle = SFSymbol(rawValue: "cloud.heavyrain.circle")

    /// 􁛔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudHeavyrainCircleFill = SFSymbol(rawValue: "cloud.heavyrain.circle.fill")

    /// 􁛫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudMoonBoltCircle = SFSymbol(rawValue: "cloud.moon.bolt.circle")

    /// 􁛬
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudMoonBoltCircleFill = SFSymbol(rawValue: "cloud.moon.bolt.circle.fill")

    /// 􁛧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudMoonCircle = SFSymbol(rawValue: "cloud.moon.circle")

    /// 􁛨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudMoonCircleFill = SFSymbol(rawValue: "cloud.moon.circle.fill")

    /// 􁛩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudMoonRainCircle = SFSymbol(rawValue: "cloud.moon.rain.circle")

    /// 􁛪
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudMoonRainCircleFill = SFSymbol(rawValue: "cloud.moon.rain.circle.fill")

    /// 􁛑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudRainCircle = SFSymbol(rawValue: "cloud.rain.circle")

    /// 􁛒
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudRainCircleFill = SFSymbol(rawValue: "cloud.rain.circle.fill")

    /// 􁛛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudSleetCircle = SFSymbol(rawValue: "cloud.sleet.circle")

    /// 􁛜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudSleetCircleFill = SFSymbol(rawValue: "cloud.sleet.circle.fill")

    /// 􁛙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudSnowCircle = SFSymbol(rawValue: "cloud.snow.circle")

    /// 􁛚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudSnowCircleFill = SFSymbol(rawValue: "cloud.snow.circle.fill")

    /// 􁛥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudSunBoltCircle = SFSymbol(rawValue: "cloud.sun.bolt.circle")

    /// 􁛦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudSunBoltCircleFill = SFSymbol(rawValue: "cloud.sun.bolt.circle.fill")

    /// 􁛡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudSunCircle = SFSymbol(rawValue: "cloud.sun.circle")

    /// 􁛢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudSunCircleFill = SFSymbol(rawValue: "cloud.sun.circle.fill")

    /// 􁛣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cloudSunRainCircle = SFSymbol(rawValue: "cloud.sun.rain.circle")

    /// 􁛤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cloudSunRainCircleFill = SFSymbol(rawValue: "cloud.sun.rain.circle.fill")

    /// 􁑔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let coloncurrencysign = SFSymbol(rawValue: "coloncurrencysign")

    /// 􁔗
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let compassDrawing = SFSymbol(rawValue: "compass.drawing")

    /// 􁒺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let contactSensor = SFSymbol(rawValue: "contact.sensor")

    /// 􁒻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let contactSensorFill = SFSymbol(rawValue: "contact.sensor.fill")

    /// 􁕠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cooktop = SFSymbol(rawValue: "cooktop")

    /// 􁕡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cooktopFill = SFSymbol(rawValue: "cooktop.fill")

    /// 􁔔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let creditcardViewfinder = SFSymbol(rawValue: "creditcard.viewfinder")

    /// 􁜁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cricketBall = SFSymbol(rawValue: "cricket.ball")

    /// 􁜃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let cricketBallCircle = SFSymbol(rawValue: "cricket.ball.circle")

    /// 􁜄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cricketBallCircleFill = SFSymbol(rawValue: "cricket.ball.circle.fill")

    /// 􁜂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cricketBallFill = SFSymbol(rawValue: "cricket.ball.fill")

    /// 􁑖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let cruzeirosign = SFSymbol(rawValue: "cruzeirosign")

    /// 􁚀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let cursorarrowSquareFill = SFSymbol(rawValue: "cursorarrow.square.fill")

    /// 􁑸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let curtainsClosed = SFSymbol(rawValue: "curtains.closed")

    /// 􁑷
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let curtainsOpen = SFSymbol(rawValue: "curtains.open")

    /// 􁓧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dehumidifier = SFSymbol(rawValue: "dehumidifier")

    /// 􁓨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dehumidifierFill = SFSymbol(rawValue: "dehumidifier.fill")

    /// 􁙣
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Desk View.
    static let deskview = SFSymbol(rawValue: "deskview")

    /// 􁙤
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Desk View.
    static let deskviewFill = SFSymbol(rawValue: "deskview.fill")

    /// 􀪐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialHigh = SFSymbol(rawValue: "dial.high")

    /// 􀪑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialHighFill = SFSymbol(rawValue: "dial.high.fill")

    /// 􀍺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialLow = SFSymbol(rawValue: "dial.low")

    /// 􀍻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialLowFill = SFSymbol(rawValue: "dial.low.fill")

    /// 􁎴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialMedium = SFSymbol(rawValue: "dial.medium")

    /// 􁎵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dialMediumFill = SFSymbol(rawValue: "dial.medium.fill")

    /// 􁐢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dishwasher = SFSymbol(rawValue: "dishwasher")

    /// 􁐣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dishwasherFill = SFSymbol(rawValue: "dishwasher.fill")

    /// 􁘊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let distributeHorizontalCenter = SFSymbol(rawValue: "distribute.horizontal.center")

    /// 􁘋
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let distributeHorizontalCenterFill = SFSymbol(rawValue: "distribute.horizontal.center.fill")

    /// 􁘈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeHorizontalLeft = SFSymbol(rawValue: "distribute.horizontal.left")

    /// 􁘉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeHorizontalLeftFill = SFSymbol(rawValue: "distribute.horizontal.left.fill")

    /// 􁘌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeHorizontalRight = SFSymbol(rawValue: "distribute.horizontal.right")

    /// 􁘍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeHorizontalRightFill = SFSymbol(rawValue: "distribute.horizontal.right.fill")

    /// 􁘆
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeVerticalBottom = SFSymbol(rawValue: "distribute.vertical.bottom")

    /// 􁘇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeVerticalBottomFill = SFSymbol(rawValue: "distribute.vertical.bottom.fill")

    /// 􁘄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let distributeVerticalCenter = SFSymbol(rawValue: "distribute.vertical.center")

    /// 􁘅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let distributeVerticalCenterFill = SFSymbol(rawValue: "distribute.vertical.center.fill")

    /// 􁘂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeVerticalTop = SFSymbol(rawValue: "distribute.vertical.top")

    /// 􁘃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let distributeVerticalTopFill = SFSymbol(rawValue: "distribute.vertical.top.fill")

    /// 􁙡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let docBadgeArrowUp = SFSymbol(rawValue: "doc.badge.arrow.up")

    /// 􁙢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let docBadgeArrowUpFill = SFSymbol(rawValue: "doc.badge.arrow.up.fill")

    /// 􁎢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dollarsign = SFSymbol(rawValue: "dollarsign")

    /// 􁎣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dollarsignArrowCirclepath = SFSymbol(rawValue: "dollarsign.arrow.circlepath")

    /// 􁑈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dongsign = SFSymbol(rawValue: "dongsign")

    /// 􁏧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorFrenchClosed = SFSymbol(rawValue: "door.french.closed")

    /// 􁏦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorFrenchOpen = SFSymbol(rawValue: "door.french.open")

    /// 􁏡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorGarageClosed = SFSymbol(rawValue: "door.garage.closed")

    /// 􁘡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let doorGarageClosedTrianglebadgeExclamationmark = SFSymbol(rawValue: "door.garage.closed.trianglebadge.exclamationmark")

    /// 􁏭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorGarageDoubleBayClosed = SFSymbol(rawValue: "door.garage.double.bay.closed")

    /// 􁘣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let doorGarageDoubleBayClosedTrianglebadgeExclamationmark = SFSymbol(rawValue: "door.garage.double.bay.closed.trianglebadge.exclamationmark")

    /// 􁏬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorGarageDoubleBayOpen = SFSymbol(rawValue: "door.garage.double.bay.open")

    /// 􁘢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let doorGarageDoubleBayOpenTrianglebadgeExclamationmark = SFSymbol(rawValue: "door.garage.double.bay.open.trianglebadge.exclamationmark")

    /// 􁏠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorGarageOpen = SFSymbol(rawValue: "door.garage.open")

    /// 􁘠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let doorGarageOpenTrianglebadgeExclamationmark = SFSymbol(rawValue: "door.garage.open.trianglebadge.exclamationmark")

    /// 􁏝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorLeftHandClosed = SFSymbol(rawValue: "door.left.hand.closed")

    /// 􁏜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorLeftHandOpen = SFSymbol(rawValue: "door.left.hand.open")

    /// 􁏩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorRightHandClosed = SFSymbol(rawValue: "door.right.hand.closed")

    /// 􁏨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorRightHandOpen = SFSymbol(rawValue: "door.right.hand.open")

    /// 􁏟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorSlidingLeftHandClosed = SFSymbol(rawValue: "door.sliding.left.hand.closed")

    /// 􁏞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorSlidingLeftHandOpen = SFSymbol(rawValue: "door.sliding.left.hand.open")

    /// 􁏫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorSlidingRightHandClosed = SFSymbol(rawValue: "door.sliding.right.hand.closed")

    /// 􁏪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let doorSlidingRightHandOpen = SFSymbol(rawValue: "door.sliding.right.hand.open")

    /// 􁘯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dropDegreesign = SFSymbol(rawValue: "drop.degreesign")

    /// 􁘰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dropDegreesignFill = SFSymbol(rawValue: "drop.degreesign.fill")

    /// 􁚂
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dropDegreesignSlash = SymbolWith1Localization<Rtl>(rawValue: "drop.degreesign.slash")

    /// 􁚃
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dropDegreesignSlashFill = SymbolWith1Localization<Rtl>(rawValue: "drop.degreesign.slash.fill")

    /// 􁓀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dropKeypadRectangle = SFSymbol(rawValue: "drop.keypad.rectangle")

    /// 􁓁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let dropKeypadRectangleFill = SFSymbol(rawValue: "drop.keypad.rectangle.fill")

    /// 􁖒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dryer = SFSymbol(rawValue: "dryer")

    /// 􁖓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let dryerFill = SFSymbol(rawValue: "dryer.fill")

    /// 􁖌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dumbbell = SFSymbol(rawValue: "dumbbell")

    /// 􁖍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let dumbbellFill = SFSymbol(rawValue: "dumbbell.fill")

    /// 􁒘
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let ellipsisMessage = SFSymbol(rawValue: "ellipsis.message")

    /// 􁒙
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let ellipsisMessageFill = SFSymbol(rawValue: "ellipsis.message.fill")

    /// 􁒴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let entryLeverKeypad = SFSymbol(rawValue: "entry.lever.keypad")

    /// 􁒵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let entryLeverKeypadFill = SFSymbol(rawValue: "entry.lever.keypad.fill")

    /// 􁙏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let entryLeverKeypadTrianglebadgeExclamationmark = SFSymbol(rawValue: "entry.lever.keypad.trianglebadge.exclamationmark")

    /// 􁙐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let entryLeverKeypadTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "entry.lever.keypad.trianglebadge.exclamationmark.fill")

    /// 􁎧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let envelopeOpenBadgeClock = SFSymbol(rawValue: "envelope.open.badge.clock")

    /// 􁝀
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let eraser = SFSymbol(rawValue: "eraser")

    /// 􁝁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let eraserFill = SFSymbol(rawValue: "eraser.fill")

    /// 􁚜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eraserLineDashed = SFSymbol(rawValue: "eraser.line.dashed")

    /// 􁚝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let eraserLineDashedFill = SFSymbol(rawValue: "eraser.line.dashed.fill")

    /// 􁑇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let eurosign = SFSymbol(rawValue: "eurosign")

    /// 􀾿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let exclamationmarkBrakesignal = SFSymbol(rawValue: "exclamationmark.brakesignal")

    /// 􁙥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let exclamationmarkLock = SFSymbol(rawValue: "exclamationmark.lock")

    /// 􁙦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let exclamationmarkLockFill = SFSymbol(rawValue: "exclamationmark.lock.fill")

    /// 􁑣
    /// 2 Localizations, Single Layerset
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    static let exclamationmarkQuestionmark = SymbolWith1Localization<Ar>(rawValue: "exclamationmark.questionmark")

    /// 􁘥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveBadgeExclamationmark = SFSymbol(rawValue: "externaldrive.badge.exclamationmark")

    /// 􀭟
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "externaldrive.badge.questionmark")

    /// 􁘦
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveFillBadgeExclamationmark = SFSymbol(rawValue: "externaldrive.fill.badge.exclamationmark")

    /// 􀭠
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveFillBadgeQuestionmark = SymbolWith1Localization<Ar>(rawValue: "externaldrive.fill.badge.questionmark")

    /// 􁘨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveFillTrianglebadgeExclamationmark = SFSymbol(rawValue: "externaldrive.fill.trianglebadge.exclamationmark")

    /// 􁘧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let externaldriveTrianglebadgeExclamationmark = SFSymbol(rawValue: "externaldrive.trianglebadge.exclamationmark")

    /// 􀙌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let faceSmilingInverse = SFSymbol(rawValue: "face.smiling.inverse")

    /// 􁌜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fanAndLightCeiling = SFSymbol(rawValue: "fan.and.light.ceiling")

    /// 􁎺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fanAndLightCeilingFill = SFSymbol(rawValue: "fan.and.light.ceiling.fill")

    /// 􁌛
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fanCeiling = SFSymbol(rawValue: "fan.ceiling")

    /// 􁎹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fanCeilingFill = SFSymbol(rawValue: "fan.ceiling.fill")

    /// 􁌙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanDesk = SFSymbol(rawValue: "fan.desk")

    /// 􁒚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let fanDeskFill = SFSymbol(rawValue: "fan.desk.fill")

    /// 􁌚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanFloor = SFSymbol(rawValue: "fan.floor")

    /// 􁒛
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let fanFloorFill = SFSymbol(rawValue: "fan.floor.fill")

    /// 􁔄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanOscillation = SFSymbol(rawValue: "fan.oscillation")

    /// 􁔅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanOscillationFill = SFSymbol(rawValue: "fan.oscillation.fill")

    /// 􁝚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanbladesSlash = SFSymbol(rawValue: "fanblades.slash")

    /// 􁝛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fanbladesSlashFill = SFSymbol(rawValue: "fanblades.slash.fill")

    /// 􀪍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let faxmachineFill = SFSymbol(rawValue: "faxmachine.fill")

    /// 􁗇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figure2AndChildHoldinghands = SFSymbol(rawValue: "figure.2.and.child.holdinghands")

    /// 􁗆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figure2ArmsOpen = SFSymbol(rawValue: "figure.2.arms.open")

    /// 􁒐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureAmericanFootball = SFSymbol(rawValue: "figure.american.football")

    /// 􁘁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureAndChildHoldinghands = SFSymbol(rawValue: "figure.and.child.holdinghands")

    /// 􁒑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureArchery = SFSymbol(rawValue: "figure.archery")

    /// 􁗅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureArmsOpen = SFSymbol(rawValue: "figure.arms.open")

    /// 􁒒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureAustralianFootball = SFSymbol(rawValue: "figure.australian.football")

    /// 􁔙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBadminton = SFSymbol(rawValue: "figure.badminton")

    /// 􁌏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBarre = SFSymbol(rawValue: "figure.barre")

    /// 􁔚
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBaseball = SFSymbol(rawValue: "figure.baseball")

    /// 􁔛
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBasketball = SFSymbol(rawValue: "figure.basketball")

    /// 􁔜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBowling = SFSymbol(rawValue: "figure.bowling")

    /// 􁔝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureBoxing = SFSymbol(rawValue: "figure.boxing")

    /// 􁔞
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureClimbing = SFSymbol(rawValue: "figure.climbing")

    /// 􁔟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureCooldown = SFSymbol(rawValue: "figure.cooldown")

    /// 􁌐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureCoreTraining = SFSymbol(rawValue: "figure.core.training")

    /// 􁔠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureCricket = SFSymbol(rawValue: "figure.cricket")

    /// 􁌑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureCrossTraining = SFSymbol(rawValue: "figure.cross.training")

    /// 􁔢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureCurling = SFSymbol(rawValue: "figure.curling")

    /// 􁌒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureDance = SFSymbol(rawValue: "figure.dance")

    /// 􁔣
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureDiscSports = SFSymbol(rawValue: "figure.disc.sports")

    /// 􁙂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureDressLineVerticalFigure = SFSymbol(rawValue: "figure.dress.line.vertical.figure")

    /// 􁌌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureElliptical = SFSymbol(rawValue: "figure.elliptical")

    /// 􁔥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureEquestrianSports = SFSymbol(rawValue: "figure.equestrian.sports")

    /// 􀵮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureFall = SFSymbol(rawValue: "figure.fall")

    /// 􀵯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureFallCircle = SFSymbol(rawValue: "figure.fall.circle")

    /// 􀵰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let figureFallCircleFill = SFSymbol(rawValue: "figure.fall.circle.fill")

    /// 􁔦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureFencing = SFSymbol(rawValue: "figure.fencing")

    /// 􁔧
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureFishing = SFSymbol(rawValue: "figure.fishing")

    /// 􁕑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureFlexibility = SFSymbol(rawValue: "figure.flexibility")

    /// 􁔩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureGolf = SFSymbol(rawValue: "figure.golf")

    /// 􁔪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureGymnastics = SFSymbol(rawValue: "figure.gymnastics")

    /// 􁔫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHandCycling = SFSymbol(rawValue: "figure.hand.cycling")

    /// 􁔬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHandball = SFSymbol(rawValue: "figure.handball")

    /// 􁌎
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHighintensityIntervaltraining = SFSymbol(rawValue: "figure.highintensity.intervaltraining")

    /// 􁔭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHiking = SFSymbol(rawValue: "figure.hiking")

    /// 􁔮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHockey = SFSymbol(rawValue: "figure.hockey")

    /// 􁔯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureHunting = SFSymbol(rawValue: "figure.hunting")

    /// 􁌊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureIndoorCycle = SFSymbol(rawValue: "figure.indoor.cycle")

    /// 􁔰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureJumprope = SFSymbol(rawValue: "figure.jumprope")

    /// 􁔱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureKickboxing = SFSymbol(rawValue: "figure.kickboxing")

    /// 􁔲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureLacrosse = SFSymbol(rawValue: "figure.lacrosse")

    /// 􁔳
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureMartialArts = SFSymbol(rawValue: "figure.martial.arts")

    /// 􁔴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureMindAndBody = SFSymbol(rawValue: "figure.mind.and.body")

    /// 􁔵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureMixedCardio = SFSymbol(rawValue: "figure.mixed.cardio")

    /// 􁌇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureOpenWaterSwim = SFSymbol(rawValue: "figure.open.water.swim")

    /// 􁌉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureOutdoorCycle = SFSymbol(rawValue: "figure.outdoor.cycle")

    /// 􁔷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figurePickleball = SFSymbol(rawValue: "figure.pickleball")

    /// 􁌓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figurePilates = SFSymbol(rawValue: "figure.pilates")

    /// 􁔸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figurePlay = SFSymbol(rawValue: "figure.play")

    /// 􁌆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figurePoolSwim = SFSymbol(rawValue: "figure.pool.swim")

    /// 􁔹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRacquetball = SFSymbol(rawValue: "figure.racquetball")

    /// 􁌈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRollRunningpace = SFSymbol(rawValue: "figure.roll.runningpace")

    /// 􁔺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRolling = SFSymbol(rawValue: "figure.rolling")

    /// 􁌋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRower = SFSymbol(rawValue: "figure.rower")

    /// 􁔻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRugby = SFSymbol(rawValue: "figure.rugby")

    /// 􀐳
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureRun = SFSymbol(rawValue: "figure.run")

    /// 􀐴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureRunCircle = SFSymbol(rawValue: "figure.run.circle")

    /// 􀐵
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let figureRunCircleFill = SFSymbol(rawValue: "figure.run.circle.fill")

    /// 􁔼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSailing = SFSymbol(rawValue: "figure.sailing")

    /// 􁔽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSkating = SFSymbol(rawValue: "figure.skating")

    /// 􁔡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSkiingCrosscountry = SFSymbol(rawValue: "figure.skiing.crosscountry")

    /// 􁔤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSkiingDownhill = SFSymbol(rawValue: "figure.skiing.downhill")

    /// 􁔾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSnowboarding = SFSymbol(rawValue: "figure.snowboarding")

    /// 􁔿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSoccer = SFSymbol(rawValue: "figure.soccer")

    /// 􁕀
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSocialdance = SFSymbol(rawValue: "figure.socialdance")

    /// 􁕁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSoftball = SFSymbol(rawValue: "figure.softball")

    /// 􁕂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSquash = SFSymbol(rawValue: "figure.squash")

    /// 􁌍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureStairStepper = SFSymbol(rawValue: "figure.stair.stepper")

    /// 􁕃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureStairs = SFSymbol(rawValue: "figure.stairs")

    /// 􁕄
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureStepTraining = SFSymbol(rawValue: "figure.step.training")

    /// 􁔨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureStrengthtrainingFunctional = SFSymbol(rawValue: "figure.strengthtraining.functional")

    /// 􁐃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureStrengthtrainingTraditional = SFSymbol(rawValue: "figure.strengthtraining.traditional")

    /// 􁕅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureSurfing = SFSymbol(rawValue: "figure.surfing")

    /// 􁌔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureTableTennis = SFSymbol(rawValue: "figure.table.tennis")

    /// 􁕆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureTaichi = SFSymbol(rawValue: "figure.taichi")

    /// 􁒋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureTennis = SFSymbol(rawValue: "figure.tennis")

    /// 􁕇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureTrackAndField = SFSymbol(rawValue: "figure.track.and.field")

    /// 􁕈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureVolleyball = SFSymbol(rawValue: "figure.volleyball")

    /// 􁏚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureWalkArrival = SFSymbol(rawValue: "figure.walk.arrival")

    /// 􁏛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureWalkDeparture = SFSymbol(rawValue: "figure.walk.departure")

    /// 􁐑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let figureWalkMotion = SFSymbol(rawValue: "figure.walk.motion")

    /// 􁕉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureWaterFitness = SFSymbol(rawValue: "figure.water.fitness")

    /// 􁕊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureWaterpolo = SFSymbol(rawValue: "figure.waterpolo")

    /// 􁕌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureWrestling = SFSymbol(rawValue: "figure.wrestling")

    /// 􁒌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let figureYoga = SFSymbol(rawValue: "figure.yoga")

    /// 􁒖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let filmStack = SFSymbol(rawValue: "film.stack")

    /// 􁒗
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let filmStackFill = SFSymbol(rawValue: "film.stack.fill")

    /// 􁐸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fireplace = SFSymbol(rawValue: "fireplace")

    /// 􁐹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fireplaceFill = SFSymbol(rawValue: "fireplace.fill")

    /// 􁙾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let firewall = SFSymbol(rawValue: "firewall")

    /// 􁙿
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let firewallFill = SFSymbol(rawValue: "firewall.fill")

    /// 􁖐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fish = SFSymbol(rawValue: "fish")

    /// 􁖑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fishFill = SFSymbol(rawValue: "fish.fill")

    /// 􁜅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let flag2CrossedCircle = SFSymbol(rawValue: "flag.2.crossed.circle")

    /// 􁜆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let flag2CrossedCircleFill = SFSymbol(rawValue: "flag.2.crossed.circle.fill")

    /// 􁙌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let flagCheckered = SFSymbol(rawValue: "flag.checkered")

    /// 􁜔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical (iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1)
    static let flagCheckered2Crossed = SFSymbol(rawValue: "flag.checkered.2.crossed")

    /// 􁓯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fleuron = SFSymbol(rawValue: "fleuron")

    /// 􁓔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fleuronFill = SFSymbol(rawValue: "fleuron.fill")

    /// 􁑄
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let florinsign = SFSymbol(rawValue: "florinsign")

    /// 􁊌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let fluidBrakesignal = SFSymbol(rawValue: "fluid.brakesignal")

    /// 􁗋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let football = SFSymbol(rawValue: "football")

    /// 􁚿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let footballCircle = SFSymbol(rawValue: "football.circle")

    /// 􁛀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let footballCircleFill = SFSymbol(rawValue: "football.circle.fill")

    /// 􁗌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let footballFill = SFSymbol(rawValue: "football.fill")

    /// 􁋰
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let forwardEndCircle = SFSymbol(rawValue: "forward.end.circle")

    /// 􁋱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let forwardEndCircleFill = SFSymbol(rawValue: "forward.end.circle.fill")

    /// 􁕔
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fossilShell = SFSymbol(rawValue: "fossil.shell")

    /// 􁕕
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fossilShellFill = SFSymbol(rawValue: "fossil.shell.fill")

    /// 􁑃
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let francsign = SFSymbol(rawValue: "francsign")

    /// 􁐅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fryingPan = SFSymbol(rawValue: "frying.pan")

    /// 􁐆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let fryingPanFill = SFSymbol(rawValue: "frying.pan.fill")

    /// 􁐘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeHigh = SFSymbol(rawValue: "gauge.high")

    /// 􁐗
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeLow = SFSymbol(rawValue: "gauge.low")

    /// 􀍽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gaugeMedium = SFSymbol(rawValue: "gauge.medium")

    /// 􀓧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    /// - Hierarchical
    static let gaugeMediumBadgeMinus = SFSymbol(rawValue: "gauge.medium.badge.minus")

    /// 􀓓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    /// - Hierarchical
    static let gaugeMediumBadgePlus = SFSymbol(rawValue: "gauge.medium.badge.plus")

    /// 􁓹
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let gearBadge = SymbolWith1Localization<Rtl>(rawValue: "gear.badge")

    /// 􁐂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let gearshapeArrowTriangle2Circlepath = SFSymbol(rawValue: "gearshape.arrow.triangle.2.circlepath")

    /// 􁇲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let globeCentralSouthAsia = SFSymbol(rawValue: "globe.central.south.asia")

    /// 􁇳
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let globeCentralSouthAsiaFill = SFSymbol(rawValue: "globe.central.south.asia.fill")

    /// 􁔖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let globeDesk = SFSymbol(rawValue: "globe.desk")

    /// 􁕓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let globeDeskFill = SFSymbol(rawValue: "globe.desk.fill")

    /// 􁑓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let guaranisign = SFSymbol(rawValue: "guaranisign")

    /// 􁝌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor (iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1)
    @available(iOS, introduced: 16.0, deprecated: 16.1, renamed: "handRaisedApp")
    @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "handRaisedApp")
    @available(tvOS, introduced: 16.0, deprecated: 16.1, renamed: "handRaisedApp")
    @available(watchOS, introduced: 9.0, deprecated: 9.1, renamed: "handRaisedApp")
    static let handApp = SFSymbol(rawValue: "hand.app")

    /// 􁝍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    @available(iOS, introduced: 16.0, deprecated: 16.1, renamed: "handRaisedAppFill")
    @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "handRaisedAppFill")
    @available(tvOS, introduced: 16.0, deprecated: 16.1, renamed: "handRaisedAppFill")
    @available(watchOS, introduced: 9.0, deprecated: 9.1, renamed: "handRaisedAppFill")
    static let handAppFill = SFSymbol(rawValue: "hand.app.fill")

    /// 􁗩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let handRaisedFingersSpread = SFSymbol(rawValue: "hand.raised.fingers.spread")

    /// 􁗪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let handRaisedFingersSpreadFill = SFSymbol(rawValue: "hand.raised.fingers.spread.fill")

    /// 􀾲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let headlightHighBeam = SFSymbol(rawValue: "headlight.high.beam")

    /// 􀾳
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let headlightHighBeamFill = SFSymbol(rawValue: "headlight.high.beam.fill")

    /// 􀾴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let headlightLowBeam = SFSymbol(rawValue: "headlight.low.beam")

    /// 􀾵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let headlightLowBeamFill = SFSymbol(rawValue: "headlight.low.beam.fill")

    /// 􁎏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hearingdeviceAndSignalMeter = SFSymbol(rawValue: "hearingdevice.and.signal.meter")

    /// 􁎐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hearingdeviceAndSignalMeterFill = SFSymbol(rawValue: "hearingdevice.and.signal.meter.fill")

    /// 􁉗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hearingdeviceEarFill = SFSymbol(rawValue: "hearingdevice.ear.fill")

    /// 􁓩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let heaterVertical = SFSymbol(rawValue: "heater.vertical")

    /// 􁓪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let heaterVerticalFill = SFSymbol(rawValue: "heater.vertical.fill")

    /// 􁒬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hifireceiver = SFSymbol(rawValue: "hifireceiver")

    /// 􁒭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hifireceiverFill = SFSymbol(rawValue: "hifireceiver.fill")

    /// 􁛽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hockeyPuck = SFSymbol(rawValue: "hockey.puck")

    /// 􁛿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hockeyPuckCircle = SFSymbol(rawValue: "hockey.puck.circle")

    /// 􁜀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hockeyPuckCircleFill = SFSymbol(rawValue: "hockey.puck.circle.fill")

    /// 􁛾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hockeyPuckFill = SFSymbol(rawValue: "hockey.puck.fill")

    /// 􁋌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let holdBrakesignal = SFSymbol(rawValue: "hold.brakesignal")

    /// 􁑑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let hryvniasign = SFSymbol(rawValue: "hryvniasign")

    /// 􁘘
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let humidifier = SFSymbol(rawValue: "humidifier")

    /// 􁔆
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let humidifierAndDroplets = SFSymbol(rawValue: "humidifier.and.droplets")

    /// 􁔇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let humidifierAndDropletsFill = SFSymbol(rawValue: "humidifier.and.droplets.fill")

    /// 􁘙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let humidifierFill = SFSymbol(rawValue: "humidifier.fill")

    /// 􁛷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let hurricaneCircle = SFSymbol(rawValue: "hurricane.circle")

    /// 􁛸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let hurricaneCircleFill = SFSymbol(rawValue: "hurricane.circle.fill")

    /// 􁑉
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let indianrupeesign = SFSymbol(rawValue: "indianrupeesign")

    /// 􁌴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let infoBubble = SFSymbol(rawValue: "info.bubble")

    /// 􁌵
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let infoBubbleFill = SFSymbol(rawValue: "info.bubble.fill")

    /// 􁊇
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let infoSquare = SFSymbol(rawValue: "info.square")

    /// 􁊈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let infoSquareFill = SFSymbol(rawValue: "info.square.fill")

    /// 􁚏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let keyboardBadgeEllipsisFill = SFSymbol(rawValue: "keyboard.badge.ellipsis.fill")

    /// 􁔕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keyboardBadgeEye = SFSymbol(rawValue: "keyboard.badge.eye")

    /// 􁚐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let keyboardBadgeEyeFill = SFSymbol(rawValue: "keyboard.badge.eye.fill")

    /// 􁚑
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let keyboardChevronCompactDownFill = SFSymbol(rawValue: "keyboard.chevron.compact.down.fill")

    /// 􁚒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let keyboardChevronCompactLeftFill = SFSymbol(rawValue: "keyboard.chevron.compact.left.fill")

    /// 􁚓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let keyboardOnehandedLeftFill = SFSymbol(rawValue: "keyboard.onehanded.left.fill")

    /// 􁚔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let keyboardOnehandedRightFill = SFSymbol(rawValue: "keyboard.onehanded.right.fill")

    /// 􁑍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let kipsign = SFSymbol(rawValue: "kipsign")

    /// 􁌡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampCeiling = SFSymbol(rawValue: "lamp.ceiling")

    /// 􁎻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampCeilingFill = SFSymbol(rawValue: "lamp.ceiling.fill")

    /// 􁒨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampCeilingInverse = SFSymbol(rawValue: "lamp.ceiling.inverse")

    /// 􁎶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampDesk = SFSymbol(rawValue: "lamp.desk")

    /// 􁌞
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampDeskFill = SFSymbol(rawValue: "lamp.desk.fill")

    /// 􁎿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampFloor = SFSymbol(rawValue: "lamp.floor")

    /// 􁌠
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampFloorFill = SFSymbol(rawValue: "lamp.floor.fill")

    /// 􁏀
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampTable = SFSymbol(rawValue: "lamp.table")

    /// 􁌟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lampTableFill = SFSymbol(rawValue: "lamp.table.fill")

    /// 􁘞
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPad.
    @available(iOS, introduced: 16.0, deprecated: 16.1, renamed: "macbookAndIpad")
    @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "macbookAndIpad")
    @available(tvOS, introduced: 16.0, deprecated: 16.1, renamed: "macbookAndIpad")
    @available(watchOS, introduced: 9.0, deprecated: 9.1, renamed: "macbookAndIpad")
    static let laptopcomputerAndIpad = SFSymbol(rawValue: "laptopcomputer.and.ipad")

    /// 􁑝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let larisign = SFSymbol(rawValue: "larisign")

    /// 􁊘
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let laurelLeading = SFSymbol(rawValue: "laurel.leading")

    /// 􁊙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let laurelTrailing = SFSymbol(rawValue: "laurel.trailing")

    /// 􁒰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightBeaconMax = SFSymbol(rawValue: "light.beacon.max")

    /// 􁒱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightBeaconMaxFill = SFSymbol(rawValue: "light.beacon.max.fill")

    /// 􁜮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightBeaconMin = SFSymbol(rawValue: "light.beacon.min")

    /// 􁜯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightBeaconMinFill = SFSymbol(rawValue: "light.beacon.min.fill")

    /// 􁎼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightCylindricalCeiling = SFSymbol(rawValue: "light.cylindrical.ceiling")

    /// 􁌤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightCylindricalCeilingFill = SFSymbol(rawValue: "light.cylindrical.ceiling.fill")

    /// 􁒪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightCylindricalCeilingInverse = SFSymbol(rawValue: "light.cylindrical.ceiling.inverse")

    /// 􁎽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightPanel = SFSymbol(rawValue: "light.panel")

    /// 􁌣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightPanelFill = SFSymbol(rawValue: "light.panel.fill")

    /// 􁎾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessed = SFSymbol(rawValue: "light.recessed")

    /// 􁏘
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessed3 = SFSymbol(rawValue: "light.recessed.3")

    /// 􁏙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessed3Fill = SFSymbol(rawValue: "light.recessed.3.fill")

    /// 􁒫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessed3Inverse = SFSymbol(rawValue: "light.recessed.3.inverse")

    /// 􁌢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessedFill = SFSymbol(rawValue: "light.recessed.fill")

    /// 􁒩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRecessedInverse = SFSymbol(rawValue: "light.recessed.inverse")

    /// 􁒜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRibbon = SFSymbol(rawValue: "light.ribbon")

    /// 􁒝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightRibbonFill = SFSymbol(rawValue: "light.ribbon.fill")

    /// 􁌥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightStrip2 = SFSymbol(rawValue: "light.strip.2")

    /// 􁏒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightStrip2Fill = SFSymbol(rawValue: "light.strip.2.fill")

    /// 􁓼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightbulb2 = SFSymbol(rawValue: "lightbulb.2")

    /// 􁓽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightbulb2Fill = SFSymbol(rawValue: "lightbulb.2.fill")

    /// 􁎦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightbulbLed = SFSymbol(rawValue: "lightbulb.led")

    /// 􁌝
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightbulbLedFill = SFSymbol(rawValue: "lightbulb.led.fill")

    /// 􁏁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lightbulbLedWide = SFSymbol(rawValue: "lightbulb.led.wide")

    /// 􁏂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightbulbLedWideFill = SFSymbol(rawValue: "lightbulb.led.wide.fill")

    /// 􁏯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightswitchOff = SFSymbol(rawValue: "lightswitch.off")

    /// 􁏼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightswitchOffFill = SFSymbol(rawValue: "lightswitch.off.fill")

    /// 􁎒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightswitchOffSquare = SFSymbol(rawValue: "lightswitch.off.square")

    /// 􁌨
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightswitchOffSquareFill = SFSymbol(rawValue: "lightswitch.off.square.fill")

    /// 􁏮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightswitchOn = SFSymbol(rawValue: "lightswitch.on")

    /// 􁏻
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightswitchOnFill = SFSymbol(rawValue: "lightswitch.on.fill")

    /// 􁎑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let lightswitchOnSquare = SFSymbol(rawValue: "lightswitch.on.square")

    /// 􁌧
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lightswitchOnSquareFill = SFSymbol(rawValue: "lightswitch.on.square.fill")

    /// 􁑏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let lirasign = SFSymbol(rawValue: "lirasign")

    /// 􀼏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let listBulletClipboard = SFSymbol(rawValue: "list.bullet.clipboard")

    /// 􀼐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let listBulletClipboardFill = SFSymbol(rawValue: "list.bullet.clipboard.fill")

    /// 􁕜
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let listClipboard = SFSymbol(rawValue: "list.clipboard")

    /// 􁕝
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let listClipboardFill = SFSymbol(rawValue: "list.clipboard.fill")

    /// 􁗛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let lizard = SFSymbol(rawValue: "lizard")

    /// 􁗜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let lizardFill = SFSymbol(rawValue: "lizard.fill")

    /// 􁙇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let locationSlashCircle = SFSymbol(rawValue: "location.slash.circle")

    /// 􁙈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let locationSlashCircleFill = SFSymbol(rawValue: "location.slash.circle.fill")

    /// 􁜗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockOpenTrianglebadgeExclamationmark = SFSymbol(rawValue: "lock.open.trianglebadge.exclamationmark")

    /// 􁜘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockOpenTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "lock.open.trianglebadge.exclamationmark.fill")

    /// 􁙍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockTrianglebadgeExclamationmark = SFSymbol(rawValue: "lock.trianglebadge.exclamationmark")

    /// 􁙎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let lockTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "lock.trianglebadge.exclamationmark.fill")

    /// 􁏍
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Mac Studio.
    static let macstudio = SFSymbol(rawValue: "macstudio")

    /// 􁏎
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Mac Studio.
    static let macstudioFill = SFSymbol(rawValue: "macstudio.fill")

    /// 􁑚
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let manatsign = SFSymbol(rawValue: "manatsign")

    /// 􁏋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let medal = SFSymbol(rawValue: "medal")

    /// 􁏌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let medalFill = SFSymbol(rawValue: "medal.fill")

    /// 􁒇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let medicalThermometer = SFSymbol(rawValue: "medical.thermometer")

    /// 􁒈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let medicalThermometerFill = SFSymbol(rawValue: "medical.thermometer.fill")

    /// 􁋬
    /// 2 Localizations, 3 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadge = SymbolWith1Localization<Rtl>(rawValue: "message.badge")

    /// 􁗗
    /// 2 Localizations, 2 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeCircle = SymbolWith1Localization<Rtl>(rawValue: "message.badge.circle")

    /// 􁗘
    /// 2 Localizations, 3 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeCircleFill = SymbolWith1Localization<Rtl>(rawValue: "message.badge.circle.fill")

    /// 􁏊
    /// 2 Localizations, 2 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeFill = SymbolWith1Localization<Rtl>(rawValue: "message.badge.fill")

    /// 􁋭
    /// 2 Localizations, 3 Layersets, ⚠️ Restricted
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageBadgeFilledFill = SymbolWith1Localization<Rtl>(rawValue: "message.badge.filled.fill")

    /// 􁎔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let micAndSignalMeter = SFSymbol(rawValue: "mic.and.signal.meter")

    /// 􁎓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let micAndSignalMeterFill = SFSymbol(rawValue: "mic.and.signal.meter.fill")

    /// 􁙃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let micBadgeXmark = SFSymbol(rawValue: "mic.badge.xmark")

    /// 􁙄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let micFillBadgeXmark = SFSymbol(rawValue: "mic.fill.badge.xmark")

    /// 􁈹
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let microbe = SFSymbol(rawValue: "microbe")

    /// 􁚶
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let microbeCircle = SFSymbol(rawValue: "microbe.circle")

    /// 􁚷
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let microbeCircleFill = SFSymbol(rawValue: "microbe.circle.fill")

    /// 􁒅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let microbeFill = SFSymbol(rawValue: "microbe.fill")

    /// 􁐨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let microwave = SFSymbol(rawValue: "microwave")

    /// 􁐩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let microwaveFill = SFSymbol(rawValue: "microwave.fill")

    /// 􁑘
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let millsign = SFSymbol(rawValue: "millsign")

    /// 􁉱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let mirrorSideLeft = SFSymbol(rawValue: "mirror.side.left")

    /// 􁉲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let mirrorSideRight = SFSymbol(rawValue: "mirror.side.right")

    /// 􁑯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonHaze = SFSymbol(rawValue: "moon.haze")

    /// 􁜷
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonHazeCircle = SFSymbol(rawValue: "moon.haze.circle")

    /// 􁜸
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonHazeCircleFill = SFSymbol(rawValue: "moon.haze.circle.fill")

    /// 􁑰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonHazeFill = SFSymbol(rawValue: "moon.haze.fill")

    /// 􁛋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonStarsCircle = SFSymbol(rawValue: "moon.stars.circle")

    /// 􁛌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let moonStarsCircleFill = SFSymbol(rawValue: "moon.stars.circle.fill")

    /// 􀡊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseFirstQuarter = SFSymbol(rawValue: "moonphase.first.quarter")

    /// 􁐋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseFirstQuarterInverse = SFSymbol(rawValue: "moonphase.first.quarter.inverse")

    /// 􀡌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseFullMoon = SFSymbol(rawValue: "moonphase.full.moon")

    /// 􁐍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let moonphaseFullMoonInverse = SFSymbol(rawValue: "moonphase.full.moon.inverse")

    /// 􀡎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseLastQuarter = SFSymbol(rawValue: "moonphase.last.quarter")

    /// 􁐏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseLastQuarterInverse = SFSymbol(rawValue: "moonphase.last.quarter.inverse")

    /// 􀡈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let moonphaseNewMoon = SFSymbol(rawValue: "moonphase.new.moon")

    /// 􁐉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseNewMoonInverse = SFSymbol(rawValue: "moonphase.new.moon.inverse")

    /// 􀡏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaningCrescent = SFSymbol(rawValue: "moonphase.waning.crescent")

    /// 􁐐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaningCrescentInverse = SFSymbol(rawValue: "moonphase.waning.crescent.inverse")

    /// 􀡍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaningGibbous = SFSymbol(rawValue: "moonphase.waning.gibbous")

    /// 􁐎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaningGibbousInverse = SFSymbol(rawValue: "moonphase.waning.gibbous.inverse")

    /// 􀡉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaxingCrescent = SFSymbol(rawValue: "moonphase.waxing.crescent")

    /// 􁐊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaxingCrescentInverse = SFSymbol(rawValue: "moonphase.waxing.crescent.inverse")

    /// 􀡋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaxingGibbous = SFSymbol(rawValue: "moonphase.waxing.gibbous")

    /// 􁐌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let moonphaseWaxingGibbousInverse = SFSymbol(rawValue: "moonphase.waxing.gibbous.inverse")

    /// 􁑒
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let nairasign = SFSymbol(rawValue: "nairasign")

    /// 􁝊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let nosignApp = SFSymbol(rawValue: "nosign.app")

    /// 􁝋
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let nosignAppFill = SFSymbol(rawValue: "nosign.app.fill")

    /// 􁓘
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let numbersign = SFSymbol(rawValue: "numbersign")

    /// 􁔶
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let oar2Crossed = SFSymbol(rawValue: "oar.2.crossed")

    /// 􁘤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let opticaldiscFill = SFSymbol(rawValue: "opticaldisc.fill")

    /// 􁐤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let oven = SFSymbol(rawValue: "oven")

    /// 􁐥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let ovenFill = SFSymbol(rawValue: "oven.fill")

    /// 􀾼
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let parkinglight = SFSymbol(rawValue: "parkinglight")

    /// 􀾽
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let parkinglightFill = SFSymbol(rawValue: "parkinglight.fill")

    /// 􀿀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let parkingsignBrakesignal = SFSymbol(rawValue: "parkingsign.brakesignal")

    /// 􁉐
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let parkingsignBrakesignalSlash = SFSymbol(rawValue: "parkingsign.brakesignal.slash")

    /// 􁓵
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let partyPopper = SFSymbol(rawValue: "party.popper")

    /// 􁓶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let partyPopperFill = SFSymbol(rawValue: "party.popper.fill")

    /// 􁓡
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pedestrianGateClosed = SFSymbol(rawValue: "pedestrian.gate.closed")

    /// 􁓢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pedestrianGateOpen = SFSymbol(rawValue: "pedestrian.gate.open")

    /// 􁖆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let pencilAndRuler = SFSymbol(rawValue: "pencil.and.ruler")

    /// 􁖇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let pencilAndRulerFill = SFSymbol(rawValue: "pencil.and.ruler.fill")

    /// 􁚛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pencilLine = SFSymbol(rawValue: "pencil.line")

    /// 􁙚
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let person2BadgeGearshape = SFSymbol(rawValue: "person.2.badge.gearshape")

    /// 􁙛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let person2BadgeGearshapeFill = SFSymbol(rawValue: "person.2.badge.gearshape.fill")

    /// 􁙙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let person2Gobackward = SFSymbol(rawValue: "person.2.gobackward")

    /// 􁝞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let person2Slash = SFSymbol(rawValue: "person.2.slash")

    /// 􁝟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let person2SlashFill = SFSymbol(rawValue: "person.2.slash.fill")

    /// 􁙁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personAndBackgroundDotted = SFSymbol(rawValue: "person.and.background.dotted")

    /// 􁙓
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personBadgeShieldCheckmark = SFSymbol(rawValue: "person.badge.shield.checkmark")

    /// 􁙔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personBadgeShieldCheckmarkFill = SFSymbol(rawValue: "person.badge.shield.checkmark.fill")

    /// 􁗡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let personBust = SFSymbol(rawValue: "person.bust")

    /// 􁗢
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let personBustFill = SFSymbol(rawValue: "person.bust.fill")

    /// 􁖚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personCropRectangleBadgePlus = SFSymbol(rawValue: "person.crop.rectangle.badge.plus")

    /// 􁖛
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let personCropRectangleBadgePlusFill = SFSymbol(rawValue: "person.crop.rectangle.badge.plus.fill")

    /// 􁒃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personLineDottedPerson = SFSymbol(rawValue: "person.line.dotted.person")

    /// 􁒄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let personLineDottedPersonFill = SFSymbol(rawValue: "person.line.dotted.person.fill")

    /// 􁑋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let pesetasign = SFSymbol(rawValue: "pesetasign")

    /// 􁑌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let pesosign = SFSymbol(rawValue: "pesosign")

    /// 􀍃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneArrowDownLeftFill = SFSymbol(rawValue: "phone.arrow.down.left.fill")

    /// 􀍅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneArrowRightFill = SFSymbol(rawValue: "phone.arrow.right.fill")

    /// 􁏽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneArrowUpRightCircle = SFSymbol(rawValue: "phone.arrow.up.right.circle")

    /// 􁏾
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneArrowUpRightCircleFill = SFSymbol(rawValue: "phone.arrow.up.right.circle.fill")

    /// 􀍁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneArrowUpRightFill = SFSymbol(rawValue: "phone.arrow.up.right.fill")

    /// 􁙗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneBadgeCheckmark = SFSymbol(rawValue: "phone.badge.checkmark")

    /// 􀬜
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let phoneConnectionFill = SFSymbol(rawValue: "phone.connection.fill")

    /// 􁂅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneDownWavesLeftAndRight = SFSymbol(rawValue: "phone.down.waves.left.and.right")

    /// 􁙘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let phoneFillBadgeCheckmark = SFSymbol(rawValue: "phone.fill.badge.checkmark")

    /// 􀏯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let photoStack = SFSymbol(rawValue: "photo.stack")

    /// 􀏰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let photoStackFill = SFSymbol(rawValue: "photo.stack.fill")

    /// 􁚭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let pill = SFSymbol(rawValue: "pill")

    /// 􁚯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pillCircle = SFSymbol(rawValue: "pill.circle")

    /// 􁚰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let pillCircleFill = SFSymbol(rawValue: "pill.circle.fill")

    /// 􁚮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    static let pillFill = SFSymbol(rawValue: "pill.fill")

    /// 􁓝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pipeAndDrop = SFSymbol(rawValue: "pipe.and.drop")

    /// 􁓞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let pipeAndDropFill = SFSymbol(rawValue: "pipe.and.drop.fill")

    /// 􁏳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let playDesktopcomputer = SFSymbol(rawValue: "play.desktopcomputer")

    /// 􁏴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let playDisplay = SFSymbol(rawValue: "play.display")

    /// 􁏵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let playLaptopcomputer = SFSymbol(rawValue: "play.laptopcomputer")

    /// 􁚞
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let playpauseCircle = SFSymbol(rawValue: "playpause.circle")

    /// 􁚟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let playpauseCircleFill = SFSymbol(rawValue: "playpause.circle.fill")

    /// 􀾈
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Sony’s PlayStation.
    static let playstationLogo = SFSymbol(rawValue: "playstation.logo")

    /// 􁐇
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let popcorn = SFSymbol(rawValue: "popcorn")

    /// 􁚱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let popcornCircle = SFSymbol(rawValue: "popcorn.circle")

    /// 􁚲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let popcornCircleFill = SFSymbol(rawValue: "popcorn.circle.fill")

    /// 􁐈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let popcornFill = SFSymbol(rawValue: "popcorn.fill")

    /// 􁌲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletStrip = SFSymbol(rawValue: "poweroutlet.strip")

    /// 􁓜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletStripFill = SFSymbol(rawValue: "poweroutlet.strip.fill")

    /// 􁌽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeA = SFSymbol(rawValue: "poweroutlet.type.a")

    /// 􁍀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeAFill = SFSymbol(rawValue: "poweroutlet.type.a.fill")

    /// 􀽤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeASquare = SFSymbol(rawValue: "poweroutlet.type.a.square")

    /// 􁌩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeASquareFill = SFSymbol(rawValue: "poweroutlet.type.a.square.fill")

    /// 􁌾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeB = SFSymbol(rawValue: "poweroutlet.type.b")

    /// 􁍁
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeBFill = SFSymbol(rawValue: "poweroutlet.type.b.fill")

    /// 􀽥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeBSquare = SFSymbol(rawValue: "poweroutlet.type.b.square")

    /// 􁌼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeBSquareFill = SFSymbol(rawValue: "poweroutlet.type.b.square.fill")

    /// 􁍆
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeC = SFSymbol(rawValue: "poweroutlet.type.c")

    /// 􁍇
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeCFill = SFSymbol(rawValue: "poweroutlet.type.c.fill")

    /// 􀽦
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeCSquare = SFSymbol(rawValue: "poweroutlet.type.c.square")

    /// 􁌫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeCSquareFill = SFSymbol(rawValue: "poweroutlet.type.c.square.fill")

    /// 􁍈
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeD = SFSymbol(rawValue: "poweroutlet.type.d")

    /// 􁍉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeDFill = SFSymbol(rawValue: "poweroutlet.type.d.fill")

    /// 􀽧
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeDSquare = SFSymbol(rawValue: "poweroutlet.type.d.square")

    /// 􁍊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeDSquareFill = SFSymbol(rawValue: "poweroutlet.type.d.square.fill")

    /// 􁍋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeE = SFSymbol(rawValue: "poweroutlet.type.e")

    /// 􁍌
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeEFill = SFSymbol(rawValue: "poweroutlet.type.e.fill")

    /// 􀽨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeESquare = SFSymbol(rawValue: "poweroutlet.type.e.square")

    /// 􁍍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeESquareFill = SFSymbol(rawValue: "poweroutlet.type.e.square.fill")

    /// 􁍎
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeF = SFSymbol(rawValue: "poweroutlet.type.f")

    /// 􁍏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeFFill = SFSymbol(rawValue: "poweroutlet.type.f.fill")

    /// 􀽩
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeFSquare = SFSymbol(rawValue: "poweroutlet.type.f.square")

    /// 􁍐
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeFSquareFill = SFSymbol(rawValue: "poweroutlet.type.f.square.fill")

    /// 􁍑
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeG = SFSymbol(rawValue: "poweroutlet.type.g")

    /// 􁍒
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeGFill = SFSymbol(rawValue: "poweroutlet.type.g.fill")

    /// 􀽪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeGSquare = SFSymbol(rawValue: "poweroutlet.type.g.square")

    /// 􁌯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeGSquareFill = SFSymbol(rawValue: "poweroutlet.type.g.square.fill")

    /// 􁍓
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeH = SFSymbol(rawValue: "poweroutlet.type.h")

    /// 􁍔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeHFill = SFSymbol(rawValue: "poweroutlet.type.h.fill")

    /// 􀽫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeHSquare = SFSymbol(rawValue: "poweroutlet.type.h.square")

    /// 􁍕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeHSquareFill = SFSymbol(rawValue: "poweroutlet.type.h.square.fill")

    /// 􁍖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeI = SFSymbol(rawValue: "poweroutlet.type.i")

    /// 􁍗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeIFill = SFSymbol(rawValue: "poweroutlet.type.i.fill")

    /// 􀽬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeISquare = SFSymbol(rawValue: "poweroutlet.type.i.square")

    /// 􁍘
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeISquareFill = SFSymbol(rawValue: "poweroutlet.type.i.square.fill")

    /// 􁍙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeJ = SFSymbol(rawValue: "poweroutlet.type.j")

    /// 􁍚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeJFill = SFSymbol(rawValue: "poweroutlet.type.j.fill")

    /// 􀽭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeJSquare = SFSymbol(rawValue: "poweroutlet.type.j.square")

    /// 􁌱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeJSquareFill = SFSymbol(rawValue: "poweroutlet.type.j.square.fill")

    /// 􁍛
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeK = SFSymbol(rawValue: "poweroutlet.type.k")

    /// 􁍜
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeKFill = SFSymbol(rawValue: "poweroutlet.type.k.fill")

    /// 􀽮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeKSquare = SFSymbol(rawValue: "poweroutlet.type.k.square")

    /// 􁌮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeKSquareFill = SFSymbol(rawValue: "poweroutlet.type.k.square.fill")

    /// 􁍝
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeL = SFSymbol(rawValue: "poweroutlet.type.l")

    /// 􁍞
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeLFill = SFSymbol(rawValue: "poweroutlet.type.l.fill")

    /// 􀽯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeLSquare = SFSymbol(rawValue: "poweroutlet.type.l.square")

    /// 􁍟
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeLSquareFill = SFSymbol(rawValue: "poweroutlet.type.l.square.fill")

    /// 􁌪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeM = SFSymbol(rawValue: "poweroutlet.type.m")

    /// 􁌬
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeMFill = SFSymbol(rawValue: "poweroutlet.type.m.fill")

    /// 􁁻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeMSquare = SFSymbol(rawValue: "poweroutlet.type.m.square")

    /// 􁌳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeMSquareFill = SFSymbol(rawValue: "poweroutlet.type.m.square.fill")

    /// 􁌭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeN = SFSymbol(rawValue: "poweroutlet.type.n")

    /// 􁌰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeNFill = SFSymbol(rawValue: "poweroutlet.type.n.fill")

    /// 􁁼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeNSquare = SFSymbol(rawValue: "poweroutlet.type.n.square")

    /// 􁍠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeNSquareFill = SFSymbol(rawValue: "poweroutlet.type.n.square.fill")

    /// 􁍡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeO = SFSymbol(rawValue: "poweroutlet.type.o")

    /// 􁍢
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeOFill = SFSymbol(rawValue: "poweroutlet.type.o.fill")

    /// 􁁽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let poweroutletTypeOSquare = SFSymbol(rawValue: "poweroutlet.type.o.square")

    /// 􁍣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let poweroutletTypeOSquareFill = SFSymbol(rawValue: "poweroutlet.type.o.square.fill")

    /// 􁌶
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let questionmarkBubble = SymbolWith1Localization<Ar>(rawValue: "questionmark.bubble")

    /// 􁌷
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let questionmarkBubbleFill = SymbolWith1Localization<Ar>(rawValue: "questionmark.bubble.fill")

    /// 􁖖
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let quotelevel = SFSymbol(rawValue: "quotelevel")

    /// 􁋪
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let recordingtapeCircle = SFSymbol(rawValue: "recordingtape.circle")

    /// 􁋫
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let recordingtapeCircleFill = SFSymbol(rawValue: "recordingtape.circle.fill")

    /// 􁚠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectanglePortraitAndArrowForward = SFSymbol(rawValue: "rectangle.portrait.and.arrow.forward")

    /// 􁚡
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rectanglePortraitAndArrowForwardFill = SFSymbol(rawValue: "rectangle.portrait.and.arrow.forward.fill")

    /// 􁉕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let rectanglePortraitOnRectanglePortraitAngled = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait.angled")

    /// 􁉖
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rectanglePortraitOnRectanglePortraitAngledFill = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait.angled.fill")

    /// 􁐞
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let refrigerator = SFSymbol(rawValue: "refrigerator")

    /// 􁐟
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let refrigeratorFill = SFSymbol(rawValue: "refrigerator.fill")

    /// 􁕷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let roadLanes = SFSymbol(rawValue: "road.lanes")

    /// 􁕺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let roadLanesCurvedLeft = SFSymbol(rawValue: "road.lanes.curved.left")

    /// 􁕻
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let roadLanesCurvedRight = SFSymbol(rawValue: "road.lanes.curved.right")

    /// 􁑺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rollerShadeClosed = SFSymbol(rawValue: "roller.shade.closed")

    /// 􁑹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let rollerShadeOpen = SFSymbol(rawValue: "roller.shade.open")

    /// 􁑼
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let romanShadeClosed = SFSymbol(rawValue: "roman.shade.closed")

    /// 􁑻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let romanShadeOpen = SFSymbol(rawValue: "roman.shade.open")

    /// 􁑆
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rublesign = SFSymbol(rawValue: "rublesign")

    /// 􁑛
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let rupeesign = SFSymbol(rawValue: "rupeesign")

    /// 􁋴
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sailboat = SFSymbol(rawValue: "sailboat")

    /// 􁋵
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sailboatFill = SFSymbol(rawValue: "sailboat.fill")

    /// 􁔉
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sensor = SFSymbol(rawValue: "sensor")

    /// 􁔊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sensorFill = SFSymbol(rawValue: "sensor.fill")

    /// 􁅁
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shared With You feature.
    static let sharedWithYou = SFSymbol(rawValue: "shared.with.you")

    /// 􁇦
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shared With You feature.
    static let sharedWithYouSlash = SFSymbol(rawValue: "shared.with.you.slash")

    /// 􁈴
    /// Single Localization, 2 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shazam.
    static let shazamLogo = SFSymbol(rawValue: "shazam.logo")

    /// 􁈵
    /// Single Localization, 3 Layersets, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Shazam.
    static let shazamLogoFill = SFSymbol(rawValue: "shazam.logo.fill")

    /// 􁑙
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shekelsign = SFSymbol(rawValue: "shekelsign")

    /// 􀟄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let shippingboxAndArrowBackward = SFSymbol(rawValue: "shippingbox.and.arrow.backward")

    /// 􀟅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let shippingboxAndArrowBackwardFill = SFSymbol(rawValue: "shippingbox.and.arrow.backward.fill")

    /// 􁔈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let shoeprintsFill = SFSymbol(rawValue: "shoeprints.fill")

    /// 􁓂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let shower = SFSymbol(rawValue: "shower")

    /// 􁓃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let showerFill = SFSymbol(rawValue: "shower.fill")

    /// 􁓍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let showerHandheld = SFSymbol(rawValue: "shower.handheld")

    /// 􁓎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let showerHandheldFill = SFSymbol(rawValue: "shower.handheld.fill")

    /// 􁓆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let showerSidejet = SFSymbol(rawValue: "shower.sidejet")

    /// 􁓇
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let showerSidejetFill = SFSymbol(rawValue: "shower.sidejet.fill")

    /// 􁐪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sink = SFSymbol(rawValue: "sink")

    /// 􁐫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sinkFill = SFSymbol(rawValue: "sink.fill")

    /// 􁚌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sliderHorizontal2Gobackward = SFSymbol(rawValue: "slider.horizontal.2.gobackward")

    /// 􁚋
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sliderHorizontal2SquareBadgeArrowDown = SFSymbol(rawValue: "slider.horizontal.2.square.badge.arrow.down")

    /// 􁚊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sliderHorizontal2SquareOnSquare = SFSymbol(rawValue: "slider.horizontal.2.square.on.square")

    /// 􁐄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sliderHorizontalBelowSquareAndSquareFilled = SFSymbol(rawValue: "slider.horizontal.below.square.and.square.filled")

    /// 􁛭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let smokeCircle = SFSymbol(rawValue: "smoke.circle")

    /// 􁛮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let smokeCircleFill = SFSymbol(rawValue: "smoke.circle.fill")

    /// 􀦥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let soccerball = SFSymbol(rawValue: "soccerball")

    /// 􁚸
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let soccerballCircle = SFSymbol(rawValue: "soccerball.circle")

    /// 􁚹
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let soccerballCircleFill = SFSymbol(rawValue: "soccerball.circle.fill")

    /// 􁜽
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let soccerballCircleFillInverse = SFSymbol(rawValue: "soccerball.circle.fill.inverse")

    /// 􁚺
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let soccerballCircleInverse = SFSymbol(rawValue: "soccerball.circle.inverse")

    /// 􁗈
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let soccerballInverse = SFSymbol(rawValue: "soccerball.inverse")

    /// 􁐲
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sofa = SFSymbol(rawValue: "sofa")

    /// 􁐳
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sofaFill = SFSymbol(rawValue: "sofa.fill")

    /// 􁁺
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let space = SFSymbol(rawValue: "space")

    /// 􁜌
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let speakerMinus = SFSymbol(rawValue: "speaker.minus")

    /// 􁜍
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let speakerMinusFill = SFSymbol(rawValue: "speaker.minus.fill")

    /// 􁜊
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let speakerPlus = SFSymbol(rawValue: "speaker.plus")

    /// 􁜋
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let speakerPlusFill = SFSymbol(rawValue: "speaker.plus.fill")

    /// 􀽅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let speakerSquare = SFSymbol(rawValue: "speaker.square")

    /// 􀽆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let speakerSquareFill = SFSymbol(rawValue: "speaker.square.fill")

    /// 􁗮
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let speakerWave2BubbleLeft = SymbolWith1Localization<Rtl>(rawValue: "speaker.wave.2.bubble.left")

    /// 􁗯
    /// 2 Localizations, 3 Layersets
    ///
    /// Localizations:
    /// - Left-to-Right
    /// - Right-to-Left
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let speakerWave2BubbleLeftFill = SymbolWith1Localization<Rtl>(rawValue: "speaker.wave.2.bubble.left.fill")

    /// 􁒾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let spigot = SFSymbol(rawValue: "spigot")

    /// 􁒿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let spigotFill = SFSymbol(rawValue: "spigot.fill")

    /// 􁜇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sportscourtCircle = SFSymbol(rawValue: "sportscourt.circle")

    /// 􁜈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sportscourtCircleFill = SFSymbol(rawValue: "sportscourt.circle.fill")

    /// 􁔌
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sprinkler = SFSymbol(rawValue: "sprinkler")

    /// 􁒼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sprinklerAndDroplets = SFSymbol(rawValue: "sprinkler.and.droplets")

    /// 􁒽
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sprinklerAndDropletsFill = SFSymbol(rawValue: "sprinkler.and.droplets.fill")

    /// 􁔍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sprinklerFill = SFSymbol(rawValue: "sprinkler.fill")

    /// 􀯭
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square2Layers3d = SFSymbol(rawValue: "square.2.layers.3d")

    /// 􀯯
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square2Layers3dBottomFilled = SFSymbol(rawValue: "square.2.layers.3d.bottom.filled")

    /// 􀯮
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square2Layers3dTopFilled = SFSymbol(rawValue: "square.2.layers.3d.top.filled")

    /// 􀯰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square3Layers3d = SFSymbol(rawValue: "square.3.layers.3d")

    /// 􀯳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square3Layers3dBottomFilled = SFSymbol(rawValue: "square.3.layers.3d.bottom.filled")

    /// 􀯲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square3Layers3dMiddleFilled = SFSymbol(rawValue: "square.3.layers.3d.middle.filled")

    /// 􁌅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let square3Layers3dSlash = SFSymbol(rawValue: "square.3.layers.3d.slash")

    /// 􀯱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let square3Layers3dTopFilled = SFSymbol(rawValue: "square.3.layers.3d.top.filled")

    /// 􁗙
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareAndPencilCircle = SFSymbol(rawValue: "square.and.pencil.circle")

    /// 􁗚
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareAndPencilCircleFill = SFSymbol(rawValue: "square.and.pencil.circle.fill")

    /// 􁒡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareBottomthirdInsetFilled = SFSymbol(rawValue: "square.bottomthird.inset.filled")

    /// 􁊓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let squareDotted = SFSymbol(rawValue: "square.dotted")

    /// 􁒤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareLeadingthirdInsetFilled = SFSymbol(rawValue: "square.leadingthird.inset.filled")

    /// 􁒢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareLeftthirdInsetFilled = SFSymbol(rawValue: "square.leftthird.inset.filled")

    /// 􁙰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareOnSquareBadgePersonCrop = SFSymbol(rawValue: "square.on.square.badge.person.crop")

    /// 􁙱
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareOnSquareBadgePersonCropFill = SFSymbol(rawValue: "square.on.square.badge.person.crop.fill")

    /// 􁄻
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let squareOnSquareIntersectionDashed = SFSymbol(rawValue: "square.on.square.intersection.dashed")

    /// 􁒣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareRightthirdInsetFilled = SFSymbol(rawValue: "square.rightthird.inset.filled")

    /// 􁒠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareTopthirdInsetFilled = SFSymbol(rawValue: "square.topthird.inset.filled")

    /// 􁒥
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squareTrailingthirdInsetFilled = SFSymbol(rawValue: "square.trailingthird.inset.filled")

    /// 􁚬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let squaresLeadingRectangle = SFSymbol(rawValue: "squares.leading.rectangle")

    /// 􁓓
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let squareshapeDottedSplit2x2 = SFSymbol(rawValue: "squareshape.dotted.split.2x2")

    /// 􁕋
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let stairs = SFSymbol(rawValue: "stairs")

    /// 􁚍
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let starSquareOnSquare = SFSymbol(rawValue: "star.square.on.square")

    /// 􁚎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let starSquareOnSquareFill = SFSymbol(rawValue: "star.square.on.square.fill")

    /// 􁑂
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let sterlingsign = SFSymbol(rawValue: "sterlingsign")

    /// 􁐦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let stove = SFSymbol(rawValue: "stove")

    /// 􁐧
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let stoveFill = SFSymbol(rawValue: "stove.fill")

    /// 􁛅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunAndHorizonCircle = SFSymbol(rawValue: "sun.and.horizon.circle")

    /// 􁛆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunAndHorizonCircleFill = SFSymbol(rawValue: "sun.and.horizon.circle.fill")

    /// 􁛇
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunDustCircle = SFSymbol(rawValue: "sun.dust.circle")

    /// 􁛈
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunDustCircleFill = SFSymbol(rawValue: "sun.dust.circle.fill")

    /// 􁛉
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunHazeCircle = SFSymbol(rawValue: "sun.haze.circle")

    /// 􁛊
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunHazeCircleFill = SFSymbol(rawValue: "sun.haze.circle.fill")

    /// 􁜎
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunMaxTrianglebadgeExclamationmark = SFSymbol(rawValue: "sun.max.trianglebadge.exclamationmark")

    /// 􁜏
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunMaxTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "sun.max.trianglebadge.exclamationmark.fill")

    /// 􁛁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunriseCircle = SFSymbol(rawValue: "sunrise.circle")

    /// 􁛂
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunriseCircleFill = SFSymbol(rawValue: "sunrise.circle.fill")

    /// 􁛃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let sunsetCircle = SFSymbol(rawValue: "sunset.circle")

    /// 􁛄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let sunsetCircleFill = SFSymbol(rawValue: "sunset.circle.fill")

    /// 􁙧
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let swatchpalette = SFSymbol(rawValue: "swatchpalette")

    /// 􁙨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let swatchpaletteFill = SFSymbol(rawValue: "swatchpalette.fill")

    /// 􁕳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let switchProgrammable = SFSymbol(rawValue: "switch.programmable")

    /// 􁘀
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let switchProgrammableFill = SFSymbol(rawValue: "switch.programmable.fill")

    /// 􁕴
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let switchProgrammableSquare = SFSymbol(rawValue: "switch.programmable.square")

    /// 􁕵
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let switchProgrammableSquareFill = SFSymbol(rawValue: "switch.programmable.square.fill")

    /// 􀠷
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let syringe = SFSymbol(rawValue: "syringe")

    /// 􀠸
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let syringeFill = SFSymbol(rawValue: "syringe.fill")

    /// 􁐰
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tableFurniture = SFSymbol(rawValue: "table.furniture")

    /// 􁐱
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tableFurnitureFill = SFSymbol(rawValue: "table.furniture.fill")

    /// 􀲬
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let teddybear = SFSymbol(rawValue: "teddybear")

    /// 􀲭
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let teddybearFill = SFSymbol(rawValue: "teddybear.fill")

    /// 􁑊
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tengesign = SFSymbol(rawValue: "tengesign")

    /// 􁗍
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tennisRacket = SFSymbol(rawValue: "tennis.racket")

    /// 􁜤
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tennisRacketCircle = SFSymbol(rawValue: "tennis.racket.circle")

    /// 􁜥
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tennisRacketCircleFill = SFSymbol(rawValue: "tennis.racket.circle.fill")

    /// 􁜦
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tennisball = SFSymbol(rawValue: "tennisball")

    /// 􁜨
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tennisballCircle = SFSymbol(rawValue: "tennisball.circle")

    /// 􁜩
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tennisballCircleFill = SFSymbol(rawValue: "tennisball.circle.fill")

    /// 􁜧
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tennisballFill = SFSymbol(rawValue: "tennisball.fill")

    /// 􁋨
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tent = SFSymbol(rawValue: "tent")

    /// 􁋩
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tentFill = SFSymbol(rawValue: "tent.fill")

    /// 􁘿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let textLineFirstAndArrowtriangleForward = SFSymbol(rawValue: "text.line.first.and.arrowtriangle.forward")

    /// 􁙀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let textLineLastAndArrowtriangleForward = SFSymbol(rawValue: "text.line.last.and.arrowtriangle.forward")

    /// 􀵫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let textWordSpacing = SFSymbol(rawValue: "text.word.spacing")

    /// 􁖻
    /// 3 Localizations, Single Layerset
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    /// - Hindi
    ///
    /// Layersets:
    /// - Monochrome
    static let textformat12 = SymbolWith2Localizations<Ar, Hi>(rawValue: "textformat.12")

    /// 􁔘
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let theatermaskAndPaintbrush = SFSymbol(rawValue: "theatermask.and.paintbrush")

    /// 􁕒
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let theatermaskAndPaintbrushFill = SFSymbol(rawValue: "theatermask.and.paintbrush.fill")

    /// 􁀵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let thermometerBrakesignal = SFSymbol(rawValue: "thermometer.brakesignal")

    /// 􁏄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerHigh = SFSymbol(rawValue: "thermometer.high")

    /// 􁏃
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerLow = SFSymbol(rawValue: "thermometer.low")

    /// 􀇬
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Multicolor
    /// - Hierarchical
    static let thermometerMedium = SFSymbol(rawValue: "thermometer.medium")

    /// 􁗄
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let thermometerMediumSlash = SFSymbol(rawValue: "thermometer.medium.slash")

    /// 􁛻
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let thermometerSnowflakeCircle = SFSymbol(rawValue: "thermometer.snowflake.circle")

    /// 􁛼
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerSnowflakeCircleFill = SFSymbol(rawValue: "thermometer.snowflake.circle.fill")

    /// 􁛹
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let thermometerSunCircle = SFSymbol(rawValue: "thermometer.sun.circle")

    /// 􁛺
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let thermometerSunCircleFill = SFSymbol(rawValue: "thermometer.sun.circle.fill")

    /// 􁙅
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let timerCircle = SFSymbol(rawValue: "timer.circle")

    /// 􁙆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let timerCircleFill = SFSymbol(rawValue: "timer.circle.fill")

    /// 􁐾
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let toilet = SFSymbol(rawValue: "toilet")

    /// 􁐿
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let toiletFill = SFSymbol(rawValue: "toilet.fill")

    /// 􁛳
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tornadoCircle = SFSymbol(rawValue: "tornado.circle")

    /// 􁛴
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tornadoCircleFill = SFSymbol(rawValue: "tornado.circle.fill")

    /// 􀠏
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let trophy = SFSymbol(rawValue: "trophy")

    /// 􁒔
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let trophyCircle = SFSymbol(rawValue: "trophy.circle")

    /// 􁒕
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let trophyCircleFill = SFSymbol(rawValue: "trophy.circle.fill")

    /// 􀠐
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let trophyFill = SFSymbol(rawValue: "trophy.fill")

    /// 􁛵
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tropicalstormCircle = SFSymbol(rawValue: "tropicalstorm.circle")

    /// 􁛶
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let tropicalstormCircleFill = SFSymbol(rawValue: "tropicalstorm.circle.fill")

    /// 􁑗
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let tugriksign = SFSymbol(rawValue: "tugriksign")

    /// 􁑅
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let turkishlirasign = SFSymbol(rawValue: "turkishlirasign")

    /// 􁝡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let tvAndMediaboxFill = SFSymbol(rawValue: "tv.and.mediabox.fill")

    /// 􀸰
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let umbrellaPercent = SymbolWith1Localization<Ar>(rawValue: "umbrella.percent")

    /// 􀸱
    /// 2 Localizations, 2 Layersets
    ///
    /// Localizations:
    /// - Latin
    /// - Arabic
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let umbrellaPercentFill = SymbolWith1Localization<Ar>(rawValue: "umbrella.percent.fill")

    /// 􁙮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let vialViewfinder = SFSymbol(rawValue: "vial.viewfinder")

    /// 􁓟
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let videoDoorbell = SFSymbol(rawValue: "video.doorbell")

    /// 􁓠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let videoDoorbellFill = SFSymbol(rawValue: "video.doorbell.fill")

    /// 􁒮
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let videoprojector = SFSymbol(rawValue: "videoprojector")

    /// 􁒯
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let videoprojectorFill = SFSymbol(rawValue: "videoprojector.fill")

    /// 􁜪
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let volleyball = SFSymbol(rawValue: "volleyball")

    /// 􁜬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let volleyballCircle = SFSymbol(rawValue: "volleyball.circle")

    /// 􁜭
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let volleyballCircleFill = SFSymbol(rawValue: "volleyball.circle.fill")

    /// 􁜫
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let volleyballFill = SFSymbol(rawValue: "volleyball.fill")

    /// 􁐠
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let washer = SFSymbol(rawValue: "washer")

    /// 􁐡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let washerFill = SFSymbol(rawValue: "washer.fill")

    /// 􁎄
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waterWaves = SFSymbol(rawValue: "water.waves")

    /// 􁎆
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waterWavesAndArrowDown = SFSymbol(rawValue: "water.waves.and.arrow.down")

    /// 􁜰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waterWavesAndArrowDownTrianglebadgeExclamationmark = SFSymbol(rawValue: "water.waves.and.arrow.down.trianglebadge.exclamationmark")

    /// 􁎅
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let waterWavesAndArrowUp = SFSymbol(rawValue: "water.waves.and.arrow.up")

    /// 􁗃
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let waterWavesSlash = SFSymbol(rawValue: "water.waves.slash")

    /// 􁏏
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let waveformSlash = SFSymbol(rawValue: "waveform.slash")

    /// 􁒲
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let webCamera = SFSymbol(rawValue: "web.camera")

    /// 􁒳
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let webCameraFill = SFSymbol(rawValue: "web.camera.fill")

    /// 􁓣
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let wifiRouter = SFSymbol(rawValue: "wifi.router")

    /// 􁓤
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let wifiRouterFill = SFSymbol(rawValue: "wifi.router.fill")

    /// 􁛯
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windCircle = SFSymbol(rawValue: "wind.circle")

    /// 􁛰
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let windCircleFill = SFSymbol(rawValue: "wind.circle.fill")

    /// 􁛱
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windSnowCircle = SFSymbol(rawValue: "wind.snow.circle")

    /// 􁛲
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let windSnowCircleFill = SFSymbol(rawValue: "wind.snow.circle.fill")

    /// 􁑽
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowAwning = SFSymbol(rawValue: "window.awning")

    /// 􁑾
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowAwningClosed = SFSymbol(rawValue: "window.awning.closed")

    /// 􁑿
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowCasement = SFSymbol(rawValue: "window.casement")

    /// 􁒀
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowCasementClosed = SFSymbol(rawValue: "window.casement.closed")

    /// 􁒁
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowCeiling = SFSymbol(rawValue: "window.ceiling")

    /// 􁒂
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowCeilingClosed = SFSymbol(rawValue: "window.ceiling.closed")

    /// 􁑭
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowHorizontal = SFSymbol(rawValue: "window.horizontal")

    /// 􁑮
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowHorizontalClosed = SFSymbol(rawValue: "window.horizontal.closed")

    /// 􁏣
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowShadeClosed = SFSymbol(rawValue: "window.shade.closed")

    /// 􁏢
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowShadeOpen = SFSymbol(rawValue: "window.shade.open")

    /// 􁑬
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowVerticalClosed = SFSymbol(rawValue: "window.vertical.closed")

    /// 􁑫
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    static let windowVerticalOpen = SFSymbol(rawValue: "window.vertical.open")

    /// 􁀕
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    @available(iOS, introduced: 16.0, deprecated: 16.1, renamed: "windshieldFrontAndSpray")
    @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "windshieldFrontAndSpray")
    @available(tvOS, introduced: 16.0, deprecated: 16.1, renamed: "windshieldFrontAndSpray")
    @available(watchOS, introduced: 9.0, deprecated: 9.1, renamed: "windshieldFrontAndSpray")
    static let windshieldFrontAndFluid = SFSymbol(rawValue: "windshield.front.and.fluid")

    /// 􁀔
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let windshieldFrontAndWiper = SFSymbol(rawValue: "windshield.front.and.wiper")

    /// 􁀗
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let windshieldFrontAndWiperAndDrop = SFSymbol(rawValue: "windshield.front.and.wiper.and.drop")

    /// 􁀡
    /// Single Localization, 2 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    @available(iOS, introduced: 16.0, deprecated: 16.1, renamed: "windshieldRearAndSpray")
    @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "windshieldRearAndSpray")
    @available(tvOS, introduced: 16.0, deprecated: 16.1, renamed: "windshieldRearAndSpray")
    @available(watchOS, introduced: 9.0, deprecated: 9.1, renamed: "windshieldRearAndSpray")
    static let windshieldRearAndFluid = SFSymbol(rawValue: "windshield.rear.and.fluid")

    /// 􁀠
    /// Single Localization, 3 Layersets
    ///
    /// Layersets:
    /// - Monochrome
    /// - Hierarchical
    /// - Multicolor
    static let windshieldRearAndWiper = SFSymbol(rawValue: "windshield.rear.and.wiper")

    /// 􁎤
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let wineglass = SFSymbol(rawValue: "wineglass")

    /// 􁎥
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let wineglassFill = SFSymbol(rawValue: "wineglass.fill")

    /// 􁑎
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let wonsign = SFSymbol(rawValue: "wonsign")

    /// 􀎕
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let wrenchAdjustable = SFSymbol(rawValue: "wrench.adjustable")

    /// 􀎖
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let wrenchAdjustableFill = SFSymbol(rawValue: "wrench.adjustable.fill")

    /// 􀾉
    /// Single Localization, Single Layerset, ⚠️ Restricted
    ///
    /// Layersets:
    /// - Monochrome
    ///
    /// - Warning: ⚠️ This symbol may not be modified and may only be used to refer to Microsoft’s Xbox.
    static let xboxLogo = SFSymbol(rawValue: "xbox.logo")

    /// 􁑁
    /// Single Localization, Single Layerset
    ///
    /// Layersets:
    /// - Monochrome
    static let yensign = SFSymbol(rawValue: "yensign")
}
